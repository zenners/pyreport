from flask import Flask, request, jsonify, send_file
import json
import requests
import pandas as pd
import numpy as np
import openpyxl
import flask_excel as excel
from io import BytesIO, StringIO
import os

import smtplib, ssl
from email.mime.multipart import MIMEMultipart
from email.mime.base import MIMEBase
from email.mime.text import MIMEText
from email.utils import formatdate
from email import encoders
from datetime import datetime
from pytz import timezone

from array import *
import ast

app = Flask(__name__)
excel.init_excel(app)
port = 5001
# port = int(os.getenv("PORT"))

fmtDate = "%m/%d/%Y"
fmtTime = "%I:%M %p"
now_utc = datetime.now(timezone('UTC'))
now_pacific = now_utc.astimezone(timezone('Asia/Manila'))
dateNow = now_pacific.strftime(fmtDate)
timeNow = now_pacific.strftime(fmtTime)

comNameStyle = {'bold': True, 'align': 'left', 'font_size': '14'}
docNameStyle = {'bold': True, 'align': 'left'}
periodStyle = {'align': 'left'}
generatedStyle = {'align': 'right'}
headerStyle = {'bold': True, 'align': 'center', 'valign': 'vcenter', 'border': True}
entriesStyle = {'bold': True, 'bottom': 2, 'align': 'center'}
borderFormatStyle = {'bold': True, 'bottom': 2, 'align': 'center', 'num_format': '₱#,##0.00'}
topBorderStyle = {'bold': True, 'top': 2, 'align': 'center'}
footerStyle = {'bold': True, 'align': 'right', 'num_format': '₱#,##0.00'}
sumStyle = {'bold': True, 'align': 'right'}

def alphabet(secondRange):
    alphaList = [chr(c) for c in range(ord('A'), ord(secondRange) + 1)]
    return alphaList

def numbers(numRange):
    number = [number + 1 for number in range(numRange)]
    return number

def columnWidth(list1, list2):
    list3 = [max(value) for value in zip(list1, list2)]
    return list3

def workSheet(workbook, worksheet, range1, range2, range3, xldate_header, name, companyName, reportTitle, branchName):

    merge_format1 = workbook.add_format(periodStyle)
    merge_format2 = workbook.add_format(docNameStyle)
    merge_format3 = workbook.add_format(comNameStyle)
    merge_format5 = workbook.add_format(generatedStyle)

    worksheet.merge_range('A1:{}1'.format(range1), '{}'.format(companyName), merge_format3)
    worksheet.merge_range('A2:{}2'.format(range1), '{}'.format(reportTitle), merge_format2)
    worksheet.merge_range('A3:{}3'.format(range1), xldate_header, merge_format1)
    worksheet.merge_range('A4:{}4'.format(range1), '{}'.format(branchName), merge_format1)

    worksheet.merge_range('{}1:{}1'.format(range2, range3), 'Date Generated: {}'.format(dateNow), merge_format5)
    worksheet.merge_range('{}2:{}2'.format(range2, range3), 'Generated By: {}'.format(name), merge_format5)
    worksheet.merge_range('{}3:{}3'.format(range2, range3), 'Time Generated: {}'.format(timeNow), merge_format5)
    worksheet.merge_range('{}4:{}4'.format(range2, range3), 'Page - of -', merge_format5)

def paymentTypeWorksheet(worksheet, count, count1, count2, count3, count4, type, merge_format7):

    worksheet.merge_range('B{}:B{}'.format(count + count1 + count2 + count3 + count4 + 4, count + count1 + count2 + count3 + count4 + 5), 'DATE', merge_format7)
    worksheet.merge_range('C{}:C{}'.format(count + count1 + count2 + count3 + count4 + 4, count + count1 + count2 + count3 + count4 + 5), 'OR #', merge_format7)
    worksheet.merge_range('D{}:D{}'.format(count + count1 + count2 + count3 + count4 + 4, count + count1 + count2 + count3 + count4 + 5), '{} TYPE'.format(type), merge_format7)
    worksheet.merge_range('E{}:G{}'.format(count + count1 + count2 + count3 + count4 + 4, count + count1 + count2 + count3 + count4 + 4), 'AMOUNT', merge_format7)
    worksheet.write('E{}'.format(count + count1 + count2 + count3 + count4 + 5), 'TOTAL', merge_format7)
    worksheet.write('F{}'.format(count + count1 + count2 + count3 + count4 + 5), 'CASH', merge_format7)
    worksheet.write('G{}'.format(count + count1 + count2 + count3 + count4 + 5), 'CHECK', merge_format7)

def totalPaymentType(worksheet, count, count1, count2, count3, count4, nodisplay, merge_format2, merge_format6, merge_format8, merge_format4):
    worksheet.merge_range('E{}:G{}'.format(count + count1 + count2 + count3 + count4 + 8 - 2, count + count1 + count2 + count3 + count4 + 8 - 2), nodisplay, merge_format6)
    worksheet.write('B{}'.format(count + count1 + count2 + count3 + count4 + 8 - 1), 'TOTAL:', merge_format2)
    # for c in range(ord('E'), ord('G') + 1):
    #     worksheet.write('{}{}'.format(chr(c), count + count1 + count2 + count3 + count4 + 8 - 1), "=SUM({}{}:{}{})".format(chr(c), count + 6, chr(c), count + count1 + count2 + count3 + count4 + 5), merge_format4)
    worksheet.merge_range('B{}:G{}'.format(count + count1 + count2 + count3 + count4 + 8, count + count1 + count2 + count3 + count4 + 8),nodisplay, merge_format8)

def sumPaymentType(worksheet, count, count1, count2, count3, count4, count5, count6, merge_format4):

    for c in range(ord('E'), ord('G') + 1):
        worksheet.write('{}{}'.format(chr(c), count + count1 + count2 + count3 + count4 + 8 - 1), "=SUM({}{}:{}{})".format(chr(c), count5 + 6, chr(c), count6 + 5), merge_format4)

def send_mail(send_from, send_to, subject, text, filename, server, port, username='', password='', isTls=True):
    msg = MIMEMultipart()
    msg['From'] = send_from
    msg['To'] = send_to
    msg['Date'] = formatdate(localtime=True)
    msg['Subject'] = subject
    msg.attach(MIMEText(text))

    part = MIMEBase('application', "octet-stream")
    part.set_payload(open(filename, "rb").read())
    encoders.encode_base64(part)
    the_file = 'attachment; filename="{}"'.format(filename)
    part.add_header('Content-Disposition', the_file)
    msg.attach(part)

    # context = ssl.SSLContext(ssl.PROTOCOL_SSLv3)
    # SSL connection only working on Python 3+
    smtp = smtplib.SMTP(server, port)
    if isTls:
        smtp.starttls()
    smtp.login(username, password)
    smtp.sendmail(send_from, send_to, msg.as_string())
    smtp.quit()


@app.route("/", methods=['GET'])
def index():
    return 'Hello World! I am running on port ' + str(port)

@app.route("/collectionreport", methods=['GET'])
def collectionreport():

    output = BytesIO()
    name = request.args.get('name')
    date = request.args.get('date')
    payload = {'date': date}

    # url = 'https://api360.zennerslab.com/Service1.svc/collection'
    url = 'https://rfc360-test.zennerslab.com/Service1.svc/collection'
    r = requests.post(url, json=payload)
    data = r.json()

    writer = pd.ExcelWriter(output, engine='xlsxwriter')
    pd.options.display.float_format = '{0.:,}'.format
    headers = ["APP ID", "LOAN ACCT. #", "CLIENT'S NAME", "AMT DUE", "DD", "PNV", "MLV", "MI", "TERM", "PEN", "INT",
               "PRIN", "UNPAID MOS", "PAID MOS", "HF", "DST", "NOTARIAL", "GCLI", "OB", "STATUS", "TOTAL PAYMENT"]
    df = pd.DataFrame(data['collectionResult'])
    list1 = [len(i) for i in headers]

    if df.empty:
        count = df.shape[0] + 8
        nodisplay = 'No Data'
        df = pd.DataFrame(pd.np.empty((0, 21)))
        list2 = list1
    else:
        count = df.shape[0] + 8
        nodisplay = ''
        df['dd'] = df['dd'].astype(int)
        df['term'] = df['term'].astype(int)
        df['unapaidMonths'] = df['unapaidMonths'].astype(int)
        df['paidMonths'] = df['paidMonths'].astype(int)
        df['loanAccountNo'] = df['loanAccountNo'].map(lambda x: x.lstrip("'"))
        df['fdd'] = pd.to_datetime(df['fdd'])
        df['fdd'] = df['fdd'].map(lambda x: x.strftime('%m/%d/%Y') if pd.notnull(x) else '')
        # df['int'] = 0
        # df['prin'] = 0
        df['hf'] = 0
        df['dst'] = 0
        df['notarial'] = 0
        df['gcli'] = 0
        df = round(df, 2)
        df = df[["loanId", "loanAccountNo", "name", "amountDue", "dd", "pnv", "mlv", "mi", "term",
                 "sumOfPenalty", "totalInterest", "totalPrincipal", "unapaidMonths", "paidMonths", "hf", "dst", "notarial", "gcli", "outstandingBalance", "status",
                 "totalPayment"]]
        list2 = [max([len(str(s)) for s in df[col].values]) for col in df.columns]

    df.to_excel(writer, startrow=7, merge_cells=False, index=False, sheet_name="Collections", header=None)

    workbook = writer.book
    merge_format2 = workbook.add_format(docNameStyle)
    merge_format4 = workbook.add_format(footerStyle)
    merge_format6 = workbook.add_format(entriesStyle)
    merge_format7 = workbook.add_format(headerStyle)
    merge_format8 = workbook.add_format(sumStyle)

    xldate_header = "As of {}".format(date)

    worksheet = writer.sheets["Collections"]

    for col_num, value in enumerate(columnWidth(list1, list2)):
        worksheet.set_column(col_num, col_num, value + 1)

    range1 = 'R'
    range2 = 'S'
    range3 = 'U'
    companyName = 'RFSC'
    reportTitle = 'COLLECTION SUMMARY'
    branchName = 'Head Office'
    workSheet(workbook, worksheet, range1, range2, range3, xldate_header, name, companyName, reportTitle, branchName)

    headersList = [i for i in headers]

    for x, y in zip(alphabet(range3), headersList):
        if (x == 'O'):
            worksheet.write('O7', 'HF', merge_format7)
        elif (x == 'P'):
            worksheet.write('P7', 'DST', merge_format7)
        elif (x == 'Q'):
            worksheet.write('Q7', 'NOTARIAL', merge_format7)
        elif (x == 'R'):
            worksheet.write('R7', 'GCLI', merge_format7)
        else:
            worksheet.merge_range('{}6:{}7'.format(x, x), '{}'.format(y), merge_format7)

    worksheet.merge_range('O6:R6', 'UPFRONT CHARGES', merge_format7)

    worksheet.merge_range('A{}:U{}'.format(count, count), nodisplay, merge_format6)
    worksheet.merge_range('A{}:B{}'.format(count + 1, count + 1), 'GRAND TOTAL:', merge_format2)

    for c in range(ord('D'), ord('U') + 1):
        if (chr(c) == 'E'):
            worksheet.write('E{}'.format(count + 1), "=SUM(E8:E{})".format(count - 1), merge_format8)
        elif (chr(c) == 'I'):
            worksheet.write('I{}'.format(count + 1), "=SUM(I8:I{})".format(count - 1), merge_format8)
        elif (chr(c) == 'M'):
            worksheet.write('M{}'.format(count + 1), "=SUM(M8:M{})".format(count - 1), merge_format8)
        elif (chr(c) == 'N'):
            worksheet.write('N{}'.format(count + 1), "=SUM(N8:N{})".format(count - 1), merge_format8)
        elif (chr(c) == 'T'):
            worksheet.write('T{}'.format(count + 1), "")
        else:
            worksheet.write('{}{}'.format(chr(c), count + 1), "=SUM({}8:{}{})".format(chr(c), chr(c), count - 1),
                            merge_format4)

    writer.close()
    output.seek(0)

    print('sending spreadsheet')

    filename = "Collection Report {}.xlsx".format(date)
    return send_file(output, attachment_filename=filename, as_attachment=True)

@app.route("/accountingAgingReport", methods=['GET'])
def accountingAgingReport():

    output = BytesIO()

    name = request.args.get('name')
    date = request.args.get('date')

    payload = {'date': date}

    # url = "https://3l8yr5jb35.execute-api.us-east-1.amazonaws.com/latest/reports/accountingAgingReport" #lambda-live
    url = "https://rekzfwhmj8.execute-api.us-east-1.amazonaws.com/latest/reports/accountingAgingReport"  # lambda-test
    # url = "http://localhost:6999/reports/accountingAgingReport" #lambda-localhost
    # url ="https://report-cache.cfapps.io/accountingAging"

    r = requests.post(url, json=payload)
    data = r.json()

    writer = pd.ExcelWriter(output, engine='xlsxwriter')
    headers = ["COLLECTOR", "CLIENT'S NAME", "MOBILE #", "ADDRESS", "LOAN ACCT. #", "TODAY", "1-30",
               "31-60", "61-90", "91-120", "121-150", "151-180", "181-360", "360 & OVER", "TOTAL", "MATURED",
               "DUE PRINCIPAL", "DUE INTEREST", "DUE PENALTY"]
    df = pd.DataFrame(data)
    list1 = [len(i) for i in headers]

    if df.empty:
        count = df.shape[0] + 8
        nodisplay = 'No Data'
        df = pd.DataFrame(pd.np.empty((0, 19)))
        list2 = list1
    else:
        count = df.shape[0] + 8
        nodisplay = ''
        df['loanAccountNumber'] = df['loanAccountNumber'].map(lambda x: x.lstrip("'"))
        df = round(df, 2)
        df = df[["collector", "fullName", "mobile", "address", "loanAccountNumber", "today","1-30", "31-60", "61-90",
                 "91-120", "121-150", "151-180", "181-360", "360 & over", "total", "matured", "principal",
                 "interest", "penalty"]]
        list2 = [max([len(str(s)) for s in df[col].values]) for col in df.columns]

    df.to_excel(writer, startrow=7, merge_cells=False, index=False, sheet_name="Sheet_1", header=None)

    workbook = writer.book
    merge_format2 = workbook.add_format(docNameStyle)
    merge_format4 = workbook.add_format(footerStyle)
    merge_format6 = workbook.add_format(entriesStyle)
    merge_format7 = workbook.add_format(headerStyle)
    merge_format8 = workbook.add_format(sumStyle)

    xldate_header = "As of {}".format(date)

    worksheet = writer.sheets["Sheet_1"]

    for col_num, value in enumerate(columnWidth(list1, list2)):
        worksheet.set_column(col_num, col_num, value + 1)

    range1 = 'P'
    range2 = 'Q'
    range3 = 'S'
    companyName = 'RFSC'
    reportTitle = 'Accounting Aging Report'
    branchName = 'Head Office'
    workSheet(workbook, worksheet, range1, range2, range3, xldate_header, name, companyName, reportTitle, branchName)

    headersList = [i for i in headers]

    for x, y in zip(alphabet(range3), headersList):
        worksheet.merge_range('{}6:{}7'.format(x, x), '{}'.format(y), merge_format7)

    worksheet.merge_range('A{}:S{}'.format(count, count), nodisplay, merge_format6)
    worksheet.merge_range('A{}:B{}'.format(count + 1, count + 1), 'GRAND TOTAL:', merge_format2)

    for c in range(ord('F'), ord('S') + 1):
        if (chr(c) == 'P'):
            worksheet.write('P{}'.format(count + 1), "=SUM(P8:P{})".format(count - 1), merge_format8)
        else:
            worksheet.write('{}{}'.format(chr(c), count + 1), "=SUM({}8:{}{})".format(chr(c), chr(c), count - 1),
                                merge_format4)

    # the writer has done its job
    writer.close()

    # go back to the beginning of the stream
    output.seek(0)
    print('sending spreadsheet')
    filename = "Aging Report (Accounting) as of {}.xlsx".format(date)
    return send_file(output, attachment_filename=filename, as_attachment=True)

@app.route("/operationAgingReport", methods=['GET'])
def operationAgingReport():

    output = BytesIO()

    name = request.args.get('name')
    date = request.args.get('date')

    payload = {'date': date}

    # url = "https://3l8yr5jb35.execute-api.us-east-1.amazonaws.com/latest/reports/operationAgingReport" #lambda-live
    url = "https://rekzfwhmj8.execute-api.us-east-1.amazonaws.com/latest/reports/operationAgingReport" #lambda-test
    # url = "http://localhost:6999/reports/operationAgingReport" #lambda-localhost
    r = requests.post(url, json=payload)
    data = r.json()

    writer = pd.ExcelWriter(output, engine='xlsxwriter')
    headers = ["APP ID", "LOAN ACCT. #", "CLIENT'S NAME", "MOBILE #", "ADDRESS", "TERM", "FDD", "STATUS",
               "PNV", "MLV", "bPNV", "bMLV", "MI", "NOT DUE", "MATURED", "TODAY", "1-30", "31-60", "61-90", "91-120",
               "121-150", "151-180", "181-360", "360 & OVER", "TOTAL", "DUE PRINCIPAL", "DUE INTEREST", "DUE PENALTY"]
    df = pd.DataFrame(data['operationAgingReportJson'])
    list1 = [len(i) for i in headers]

    if df.empty:
        count = df.shape[0] + 8
        nodisplay = 'No Data'
        df = pd.DataFrame(pd.np.empty((0, 28)))
        list1 = [len(i) for i in headers]
    else:
        count = df.shape[0] + 8
        nodisplay = ''
        df['loanaccountNumber'] = df['loanaccountNumber'].map(lambda x: x.lstrip("'"))
        df['fdd'] = pd.to_datetime(df['fdd'])
        df['fdd'] = df['fdd'].map(lambda x: x.strftime('%m/%d/%Y') if pd.notnull(x) else '')
        df = round(df, 2)
        df = df[["appId", "loanaccountNumber", "fullName", "mobile", "address", "term", "fdd", "status", "PNV",
                 "MLV", "bPNV", "bMLV", "mi", "notDue", "matured", "today", "1-30", "31-60", "61-90", "91-120",
                 "121-150", "151-180", "181-360", "360 & over", "total", "duePrincipal", "dueInterest", "duePenalty"]]
        list2 = [max([len(str(s)) for s in df[col].values]) for col in df.columns]

    df.to_excel(writer, startrow=7, merge_cells=False, index=False, sheet_name="Sheet_1", header=None)

    workbook = writer.book
    merge_format2 = workbook.add_format(docNameStyle)
    merge_format4 = workbook.add_format(footerStyle)
    merge_format6 = workbook.add_format(entriesStyle)
    merge_format7 = workbook.add_format(headerStyle)
    merge_format8 = workbook.add_format(sumStyle)
    xldate_header = "As of {}".format(date)

    worksheet = writer.sheets["Sheet_1"]

    for col_num, value in enumerate(columnWidth(list1, list2)):
        worksheet.set_column(col_num, col_num, value + 1)

    range1 = 'Y'
    range2 = 'Z'
    range3 = 'AB'
    companyName = 'RFSC'
    reportTitle = 'Operation Aging Report'
    branchName = 'Head Office'
    workSheet(workbook, worksheet, range1, range2, range3, xldate_header, name, companyName, reportTitle, branchName)

    headersList = [i for i in headers]

    for x, y in zip(alphabet(range2), headersList):
        worksheet.merge_range('{}6:{}7'.format(x, x), '{}'.format(y), merge_format7)

    worksheet.merge_range('AA6:AA7', 'DUE INTEREST', merge_format7)
    worksheet.merge_range('AB6:AB7', 'DUE PENALTY', merge_format7)

    worksheet.merge_range('A{}:AB{}'.format(count, count), nodisplay, merge_format6)
    worksheet.merge_range('A{}:B{}'.format(count + 1, count + 1), 'GRAND TOTAL:', merge_format2)

    for c in range(ord('I'), ord('Z') + 1):
        if (chr(c) == 'O'):
            worksheet.write('O{}'.format(count + 1), "=SUM(O8:O{})".format(count - 1), merge_format8)
        else:
            worksheet.write('{}{}'.format(chr(c), count + 1), "=SUM({}8:{}{})".format(chr(c), chr(c), count - 1),
                                merge_format4)


    worksheet.write('AA{}'.format(count + 1), "=SUM(AA8:AA{})".format(count - 1),merge_format4)
    worksheet.write('AB{}'.format(count + 1), "=SUM(AB8:AB{})".format(count - 1),merge_format4)

    # the writer has done its job
    writer.close()

    # go back to the beginning of the stream
    output.seek(0)
    print('sending spreadsheet')
    filename = "Aging Report (Operations) as of {}.xlsx".format(date)
    return send_file(output, attachment_filename=filename, as_attachment=True)


@app.route("/newoperationAgingReport", methods=['GET'])
def newoperationAgingReport():

    output = BytesIO()

    name = request.args.get('name')
    date = request.args.get('date')

    payload = {'date': date}

    # url = "https://3l8yr5jb35.execute-api.us-east-1.amazonaws.com/latest/reports/operationAgingReport" #lambda-live
    url = "https://rekzfwhmj8.execute-api.us-east-1.amazonaws.com/latest/reports/operationAgingReport"  # lambda-test
    # url = "http://localhost:6999/reports/operationAgingReport" #lambda-localhost
    r = requests.post(url, json=payload)
    data = r.json()

    writer = pd.ExcelWriter(output, engine='xlsxwriter')
    df = pd.DataFrame(data['operationAgingReportJson'])
    df['appId'] = df['appId'].astype(int)
    df.sort_values(by=['appId'])

    if df.empty:
        count = df.shape[0] + 9
        nodisplay = 'No Data'
        totalsum = 0
        principalsum = 0
        interestsum = 0
        penaltysum = 0
        df = pd.DataFrame(pd.np.empty((0, 28)))
    else:
        count = df.shape[0] + 9
        nodisplay = ''
        totalsum = pd.Series(df['total']).sum()
        principalsum = pd.Series(df['duePrincipal']).sum()
        interestsum = pd.Series(df['dueInterest']).sum()
        penaltysum = pd.Series(df['duePenalty']).sum()
        df['loanaccountNumber'] = df['loanaccountNumber'].map(lambda x: x.lstrip("'"))
        df['fdd'] = pd.to_datetime(df['fdd'])
        df['fdd'] = df['fdd'].map(lambda x: x.strftime('%m/%d/%Y') if pd.notnull(x) else '')
        df = df[["appId", "loanaccountNumber", "fullName", "mobile", "address", "term", "fdd", "status", "PNV",
                 "MLV", "bPNV", "bMLV", "mi", "notDue", "matured", "today", "1-30", "31-60", "61-90", "91-120",
                 "121-150", "151-180", "181-360", "360 & over", "total", "duePrincipal", "dueInterest", "duePenalty"]]

    df.to_excel(writer, startrow=7, merge_cells=False, index=False, sheet_name="Sheet_1", header=None)

    workbook = writer.book
    merge_format1 = workbook.add_format({'align': 'center'})
    merge_format2 = workbook.add_format({'bold': True, 'align': 'left'})
    merge_format3 = workbook.add_format({'bold': True, 'align': 'center'})
    merge_format4 = workbook.add_format({'bold': True, 'underline': True, 'font_color': 'red', 'align': 'right'})
    merge_format5 = workbook.add_format({'bold': True, 'align': 'center', 'valign': 'vcenter', 'border': True})
    xldate_header = "As of {}".format(date)

    worksheet = writer.sheets["Sheet_1"]

    list1 = [len(i) for i in df.columns.values]
    # list1 = np.array(headerlen)

    if df.empty:
        list2 = list1
    else:
        list2 = [max([len(str(s)) for s in df[col].values]) for col in df.columns]

    def function(list1, list2):
        list3 = [max(value) for value in zip(list1, list2)]
        return list3

    for col_num, value in enumerate(function(list1, list2)):
        worksheet.set_column(col_num, col_num, value + 1)

    worksheet.merge_range('A1:W1', 'RADIOWEALTH FINANCE COMPANY, INC.', merge_format3)
    worksheet.merge_range('A2:W2', 'RFC360 Kwikredit', merge_format1)
    worksheet.merge_range('A3:W3', 'Aging Report (Operations)', merge_format3)
    worksheet.merge_range('A4:W4', xldate_header, merge_format1)

    worksheet.merge_range('A6:A7', 'Loan', merge_format5)
    worksheet.merge_range('B6:B7', 'Product Type', merge_format5)
    worksheet.merge_range('C6:C7', 'Customer Name', merge_format5)
    worksheet.merge_range('D6:D7', 'Address', merge_format5)
    worksheet.merge_range('E6:E7', 'CCI Officer', merge_format5)
    worksheet.merge_range('F6:F7', 'FDD', merge_format5)
    worksheet.merge_range('G6:G7', 'Term', merge_format5)
    worksheet.merge_range('H6:H7', 'Exp Term', merge_format5)
    worksheet.merge_range('I6:I7', 'MI', merge_format5)
    worksheet.merge_range('J6:J7', 'Status', merge_format5)
    worksheet.merge_range('K6:K7', 'Restructed', merge_format5)
    worksheet.merge_range('L6:L7', 'OB', merge_format5)
    worksheet.merge_range('M6:M7', 'Not Due', merge_format5)
    worksheet.merge_range('N6:N7', 'Current Today', merge_format5)
    worksheet.merge_range('O6:V6', 'PAST DUE', merge_format5)
    worksheet.write('O7', '1-30', merge_format5)
    worksheet.write('P7', '31-60', merge_format5)
    worksheet.write('Q7', '61-90', merge_format5)
    worksheet.write('R7', '91-120', merge_format5)
    worksheet.write('S7', '121-150', merge_format5)
    worksheet.write('T7', '151-180', merge_format5)
    worksheet.write('U7', '181-360', merge_format5)
    worksheet.write('V7', 'OVER 360', merge_format5)
    worksheet.merge_range('W6:W7', 'Total Due', merge_format5)

    worksheet.merge_range('A{}:W{}'.format(count - 1, count - 1), nodisplay, merge_format1)
    worksheet.merge_range('W{}:X{}'.format(count + 1, count + 1), 'TOTAL', merge_format3)
    worksheet.write('Y{}'.format(count + 1), totalsum, merge_format4)
    worksheet.write('Z{}'.format(count + 1), principalsum, merge_format4)
    worksheet.write('AA{}'.format(count + 1), interestsum, merge_format4)
    worksheet.write('AB{}'.format(count + 1), penaltysum, merge_format4)
    worksheet.merge_range('A{}:W{}'.format(count + 3, count + 3), 'Report Generated By :', merge_format2)
    worksheet.merge_range('A{}:W{}'.format(count + 4, count + 5), name, merge_format2)
    worksheet.merge_range('A{}:W{}'.format(count + 7, count + 7), 'Date & Time Report Generation ({})'.format(dateNow),
                          merge_format2)

    # the writer has done its job
    writer.close()

    # go back to the beginning of the stream
    output.seek(0)
    print('sending spreadsheet')
    filename = "Aging Report (Operations) as of {}.xlsx".format(date)
    return send_file(output, attachment_filename=filename, as_attachment=True)

@app.route("/newmemoreport2", methods=['GET'])
def newmemoreport2():

    output = BytesIO()

    name = request.args.get('name')
    dateStart = request.args.get('startDate')
    dateEnd = request.args.get('endDate')

    payload = {'startDate': dateStart, 'endDate': dateEnd}

    # url = "https://3l8yr5jb35.execute-api.us-east-1.amazonaws.com/latest/reports/memoreport" #lambda-live
    url = "https://rekzfwhmj8.execute-api.us-east-1.amazonaws.com/latest/reports/memoreport"  # lambda-test
    # url = "http://localhost:6999/reports/memoreport" #lambda-localhost

    r = requests.post(url, json=payload)
    data = r.json()

    writer = pd.ExcelWriter(output, engine='xlsxwriter')
    headers = ["App ID", "Loan Account Number", "Customer Name", "Sub Product", "Memo Type", "Purpose", "Amount",
               "Status", "Date", "Created By", "Approved By", "Approved Remarks"]

    creditDf = pd.DataFrame(data['Credit'])
    if creditDf.empty:
        countCredit = creditDf.shape[0] + 8
        nodisplayCredit = 'Nothing to display'
        sumCredit = 0
        creditDf = pd.DataFrame(pd.np.empty((0, 12)))
    else:
        countCredit = creditDf.shape[0] + 8
        nodisplayCredit = ''
        sumCredit = pd.Series(creditDf['amount']).sum()
        creditDf.sort_values(by=['appId'], inplace=True)
        creditDf['loanAccountNo'] = creditDf['loanAccountNo'].map(lambda x: x.lstrip("'"))
        creditDf['approvedDate'] = pd.to_datetime(creditDf['approvedDate'])
        creditDf['approvedDate'] = creditDf['approvedDate'].map(lambda x: x.strftime('%m/%d/%Y') if pd.notnull(x) else '')
        creditDf = creditDf[["appId", "loanAccountNo", "fullName", "subProduct", "memoType", "purpose", "amount",
                             "status", "date", "createdBy", "approvedBy", "approvedRemark"]]

    debitDf = pd.DataFrame(data['Debit'])
    if debitDf.empty:
        countDebit = debitDf.shape[0] + 8
        nodisplayDebit = 'Nothing to display'
        sumDebit = 0
        debitDf = pd.DataFrame(pd.np.empty((0, 12)))
    else:
        countDebit = debitDf.shape[0] + 8
        nodisplayDebit = ''
        sumDebit = pd.Series(debitDf['amount']).sum()
        debitDf.sort_values(by=['appId'], inplace=True)
        debitDf['loanAccountNo'] = debitDf['loanAccountNo'].map(lambda x: x.lstrip("'"))
        debitDf['approvedDate'] = pd.to_datetime(debitDf['approvedDate'])
        debitDf['approvedDate'] = debitDf['approvedDate'].map(lambda x: x.strftime('%m/%d/%Y') if pd.notnull(x) else '')
        debitDf = debitDf[["appId", "loanAccountNo", "fullName", "subProduct", "memoType", "purpose", "amount",
                           "status", "date", "createdBy", "approvedBy", "approvedRemark"]]


    creditDf.to_excel(writer, startrow=5, merge_cells=False, index=False, sheet_name="Credit", header=headers)
    debitDf.to_excel(writer, startrow=5, merge_cells=False, index=False, sheet_name="Debit", header=headers)

    workbook = writer.book
    merge_format1 = workbook.add_format({'align': 'center'})
    merge_format2 = workbook.add_format({'bold': True, 'align': 'left'})
    merge_format3 = workbook.add_format({'bold': True, 'align': 'center'})
    merge_format4 = workbook.add_format({'bold': True, 'underline': True, 'font_color': 'red', 'align': 'right'})
    xldate_header = "For the Period {} to {}".format(dateStart, dateEnd)

    worksheetCredit = writer.sheets["Credit"]

    list1 = [len(i) for i in headers]
    # list1 = np.array(headerlen)

    if creditDf.empty:
        list2 = list1
    else:
        list2 = [max([len(str(s)) for s in creditDf[col].values]) for col in creditDf.columns]

    def function(list1, list2):
        list3 = [max(value) for value in zip(list1, list2)]
        return list3

    for col_num, value in enumerate(function(list1, list2)):
        worksheetCredit.set_column(col_num, col_num, value + 1)

    worksheetCredit.merge_range('A1:L1', 'RADIOWEALTH FINANCE COMPANY, INC.', merge_format3)
    worksheetCredit.merge_range('A2:L2', 'RFC360 Kwikredit', merge_format1)
    worksheetCredit.merge_range('A3:L3', 'Memo Report(Credit)', merge_format3)
    worksheetCredit.merge_range('A4:L4', xldate_header, merge_format1)
    worksheetCredit.merge_range('A{}:L{}'.format(countCredit - 1, countCredit - 1), nodisplayCredit, merge_format1)
    worksheetCredit.merge_range('E{}:F{}'.format(countCredit + 1, countCredit + 1), 'TOTAL AMOUNT', merge_format3)
    worksheetCredit.write('G{}'.format(countCredit + 1), sumCredit, merge_format4)
    worksheetCredit.merge_range('A{}:L{}'.format(countCredit + 3, countCredit + 3), 'Report Generated By :', merge_format2)
    worksheetCredit.merge_range('A{}:L{}'.format(countCredit + 4, countCredit + 5), name, merge_format2)
    worksheetCredit.merge_range('A{}:L{}'.format(countCredit + 7, countCredit + 7), 'Date & Time Report Generation ({})'.format(dateNow),
                          merge_format2)

    worksheetDebit = writer.sheets["Debit"]

    list1 = [len(i) for i in headers]
    # list1 = np.array(headerlen)

    if debitDf.empty:
        list2 = list1
    else:
        list2 = [max([len(str(s)) for s in debitDf[col].values]) for col in debitDf.columns]

    def function(list1, list2):
        list3 = [max(value) for value in zip(list1, list2)]
        return list3

    for col_num, value in enumerate(function(list1, list2)):
        worksheetDebit.set_column(col_num, col_num, value + 1)

    worksheetDebit.merge_range('A1:L1', 'RADIOWEALTH FINANCE COMPANY, INC.', merge_format3)
    worksheetDebit.merge_range('A2:L2', 'RFC360 Kwikredit', merge_format1)
    worksheetDebit.merge_range('A3:L3', 'Memo Report(Debit)', merge_format3)
    worksheetDebit.merge_range('A4:L4', xldate_header, merge_format1)
    worksheetDebit.merge_range('A{}:L{}'.format(countDebit - 1, countDebit - 1), nodisplayDebit, merge_format1)
    worksheetDebit.merge_range('E{}:F{}'.format(countDebit + 1, countDebit + 1), 'TOTAL AMOUNT', merge_format3)
    worksheetDebit.write('G{}'.format(countDebit + 1), sumDebit, merge_format4)
    worksheetDebit.merge_range('A{}:L{}'.format(countDebit + 3, countDebit + 3), 'Report Generated By :', merge_format2)
    worksheetDebit.merge_range('A{}:L{}'.format(countDebit + 4, countDebit + 5), name, merge_format2)
    worksheetDebit.merge_range('A{}:L{}'.format(countDebit + 7, countDebit + 7), 'Date & Time Report Generation ({})'.format(dateNow),
                          merge_format2)

    # the writer has done its job
    writer.close()

    # go back to the beginning of the stream
    output.seek(0)
    print('sending spreadsheet')
    filename = "Memo Report {}-{}.xlsx".format(dateStart, dateEnd)
    return send_file(output, attachment_filename=filename, as_attachment=True)

@app.route("/newmemoreport", methods=['GET'])
def newmemoreport():

    output = BytesIO()

    name = request.args.get('name')
    dateStart = request.args.get('startDate')
    dateEnd = request.args.get('endDate')
    payload = {'startDate': dateStart, 'endDate': dateEnd}

    # url = "https://3l8yr5jb35.execute-api.us-east-1.amazonaws.com/latest/reports/memoreport" #lambda-live
    url = "https://rekzfwhmj8.execute-api.us-east-1.amazonaws.com/latest/reports/memoreport"  # lambda-test
    # url = "http://localhost:6999/reports/memoreport" #lambda-localhost

    r = requests.post(url, json=payload)
    data = r.json()

    writer = pd.ExcelWriter(output, engine='xlsxwriter')
    headers = ["App ID", "Loan Account Number", "Customer Name", "Sub Product", "Memo Type", "Purpose", "Amount",
               "Status", "Date", "Created By", "Remarks", "Approved Date", "Approved By", "Approved Remarks"]

    creditDf = pd.DataFrame(data['Credit'])
    if creditDf.empty:
        countCredit = creditDf.shape[0] + 8
        nodisplayCredit = 'No Data'
        sumCredit = 0
        creditDf = pd.DataFrame(pd.np.empty((0, 14)))
    else:
        countCredit = creditDf.shape[0] + 8
        nodisplayCredit = ''
        sumCredit = pd.Series(creditDf['amount']).sum()
        creditDf.sort_values(by=['appId'], inplace=True)
        creditDf['loanAccountNo'] = creditDf['loanAccountNo'].map(lambda x: x.lstrip("'"))
        creditDf['approvedDate'] = pd.to_datetime(creditDf['approvedDate'])
        creditDf['approvedDate'] = creditDf['approvedDate'].map(lambda x: x.strftime('%m/%d/%Y') if pd.notnull(x) else '')
        creditDf = creditDf[["appId", "loanAccountNo", "fullName", "subProduct", "memoType", "purpose", "amount",
                             "status", "date", "createdBy", "remark", "approvedDate", "approvedBy", "approvedRemark"]]

    debitDf = pd.DataFrame(data['Debit'])
    if debitDf.empty:
        countDebit = debitDf.shape[0] + 8
        nodisplayDebit = 'No Data'
        sumDebit = 0
        debitDf = pd.DataFrame(pd.np.empty((0, 14)))
    else:
        countDebit = debitDf.shape[0] + 8
        nodisplayDebit = ''
        sumDebit = pd.Series(debitDf['amount']).sum()
        debitDf.sort_values(by=['appId'], inplace=True)
        debitDf['loanAccountNo'] = debitDf['loanAccountNo'].map(lambda x: x.lstrip("'"))
        debitDf['approvedDate'] = pd.to_datetime(debitDf['approvedDate'])
        debitDf['approvedDate'] = debitDf['approvedDate'].map(lambda x: x.strftime('%m/%d/%Y') if pd.notnull(x) else '')
        debitDf = debitDf[["appId", "loanAccountNo", "fullName", "subProduct", "memoType", "purpose", "amount",
                           "status", "date", "createdBy", "remark", "approvedDate", "approvedBy", "approvedRemark"]]


    creditDf.to_excel(writer, startrow=7, merge_cells=False, index=False, sheet_name="Credit", header=None)
    debitDf.to_excel(writer, startrow=7, merge_cells=False, index=False, sheet_name="Debit", header=None)

    workbook = writer.book
    merge_format2 = workbook.add_format(docNameStyle)
    merge_format4 = workbook.add_format(footerStyle)
    merge_format6 = workbook.add_format(entriesStyle)
    merge_format7 = workbook.add_format(headerStyle)
    xldate_header = "{} to {}".format(dateStart, dateEnd)

    worksheetCredit = writer.sheets["Credit"]
    #
    # list1 = [len(i) for i in headers]
    # # list1 = np.array(headerlen)
    #
    # if creditDf.empty:
    #     list2 = list1
    # else:
    #     list2 = [max([len(str(s)) for s in creditDf[col].values]) for col in creditDf.columns]
    #
    # def function(list1, list2):
    #     list3 = [max(value) for value in zip(list1, list2)]
    #     return list3
    #
    # for col_num, value in enumerate(function(list1, list2)):
    #     worksheetCredit.set_column(col_num, col_num, value + 1)

    range1 = 'K'
    range2 = 'L'
    range3 = 'N'
    reportTitle = 'Memo Report (Credit)'
    workSheet(workbook, worksheetCredit, range1, range2, range3, xldate_header, name, reportTitle)

    worksheetCredit.merge_range('A6:A7', 'App ID', merge_format7)
    worksheetCredit.merge_range('B6:B7', 'Loan Acct. #', merge_format7)
    worksheetCredit.merge_range('C6:C7', "Client's Name", merge_format7)
    worksheetCredit.merge_range('D6:D7', 'Sub Product', merge_format7)
    worksheetCredit.merge_range('E6:E7', 'Memo Type', merge_format7)
    worksheetCredit.merge_range('F6:F7', 'Purpose', merge_format7)
    worksheetCredit.merge_range('G6:G7', 'Amount', merge_format7)
    worksheetCredit.merge_range('H6:H7', 'Status', merge_format7)
    worksheetCredit.merge_range('I6:I7', 'Date', merge_format7)
    worksheetCredit.merge_range('J6:J7', 'Created By', merge_format7)
    worksheetCredit.merge_range('K6:K7', 'Remarks', merge_format7)
    worksheetCredit.merge_range('L6:L7', 'Approved Date', merge_format7)
    worksheetCredit.merge_range('M6:M7', 'Approved By', merge_format7)
    worksheetCredit.merge_range('N6:N7', 'Approved Date', merge_format7)

    worksheetCredit.merge_range('A{}:N{}'.format(countCredit, countCredit), nodisplayCredit, merge_format6)
    worksheetCredit.merge_range('A{}:B{}'.format(countCredit + 1, countCredit + 1), 'GRAND TOTAL:', merge_format2)
    worksheetCredit.write('G{}'.format(countCredit + 1), sumCredit, merge_format4)

    worksheetDebit = writer.sheets["Debit"]

    # list1 = [len(i) for i in headers]
    # # list1 = np.array(headerlen)
    #
    # if debitDf.empty:
    #     list2 = list1
    # else:
    #     list2 = [max([len(str(s)) for s in debitDf[col].values]) for col in debitDf.columns]
    #
    # def function(list1, list2):
    #     list3 = [max(value) for value in zip(list1, list2)]
    #     return list3
    #
    # for col_num, value in enumerate(function(list1, list2)):
    #     worksheetDebit.set_column(col_num, col_num, value + 1)

    range1 = 'K'
    range2 = 'L'
    range3 = 'N'
    reportTitle = 'Memo Report (Debit)'
    workSheet(workbook, worksheetDebit, range1, range2, range3, xldate_header, name, reportTitle)

    worksheetDebit.merge_range('A6:A7', 'App ID', merge_format7)
    worksheetDebit.merge_range('B6:B7', 'Loan Acct. #', merge_format7)
    worksheetDebit.merge_range('C6:C7', "Client's Name", merge_format7)
    worksheetDebit.merge_range('D6:D7', 'Sub Product', merge_format7)
    worksheetDebit.merge_range('E6:E7', 'Memo Type', merge_format7)
    worksheetDebit.merge_range('F6:F7', 'Purpose', merge_format7)
    worksheetDebit.merge_range('G6:G7', 'Amount', merge_format7)
    worksheetDebit.merge_range('H6:H7', 'Status', merge_format7)
    worksheetDebit.merge_range('I6:I7', 'Date', merge_format7)
    worksheetDebit.merge_range('J6:J7', 'Created By', merge_format7)
    worksheetDebit.merge_range('K6:K7', 'Remarks', merge_format7)
    worksheetDebit.merge_range('L6:L7', 'Approved Date', merge_format7)
    worksheetDebit.merge_range('M6:M7', 'Approved By', merge_format7)
    worksheetDebit.merge_range('N6:N7', 'Approved Date', merge_format7)

    worksheetDebit.merge_range('A{}:N{}'.format(countDebit, countDebit), nodisplayDebit, merge_format6)
    worksheetDebit.merge_range('A{}:B{}'.format(countDebit + 1, countDebit + 1), 'GRAND TOTAL:', merge_format2)
    worksheetDebit.write('G{}'.format(countDebit + 1), sumDebit, merge_format4)


    writer.close()

    output.seek(0)
    print('sending spreadsheet')
    filename = "Memo Report {}-{}.xlsx".format(dateStart, dateEnd)
    return send_file(output, attachment_filename=filename, as_attachment=True)

@app.route("/memoreport", methods=['GET'])
def memoreport():
    output = BytesIO()

    dateStart = request.args.get('startDate')
    dateEnd = request.args.get('endDate')
    payload = {'startDate': dateStart, 'endDate': dateEnd}

    # url = 'https://api360.zennerslab.com/Service1.svc/getMemoReport'
    url = 'https://rfc360-test.zennerslab.com/Service1.svc/getMemoReport'
    r = requests.post(url, json=payload)
    data = r.json()

    writer = pd.ExcelWriter(output, engine='xlsxwriter')
    headers = ["App ID", "Loan Account No", "Full Name", "Mobile Number", "Sub Product", "Memo Type", "Purpose", "Amount",
               "Status", "Date Created", "Created By", "Remarks", "Approved Date", "Approved By", "Approved Remarks"]
    df = pd.DataFrame(data['getMemoReportResult'])
    df['loanId'] = df['loanId'].astype(int)
    df.sort_values(by=['loanId'], inplace=True)
    df['approvedDate'] = pd.to_datetime(df['approvedDate'])
    df['approvedDate'] = df['approvedDate'].dt.strftime('%m/%d/%Y')

    df = df[["loanId", "loanAccountNo", "fullName", "mobileNo", "subProduct", "memoType", "purpose", "amount",
             "status", "date", "createdBy", "remark", "approvedDate", "approvedBy", "approvedRemark"]]

    df.to_excel(writer, startrow=5, merge_cells=False, index=False, sheet_name="Sheet_1", header=headers)

    workbook = writer.book
    merge_format1 = workbook.add_format({'align': 'center'})
    merge_format3 = workbook.add_format({'bold': True, 'align': 'center'})
    xldate_header = "For the Period {} to {}".format(dateStart, dateEnd)

    worksheet = writer.sheets["Sheet_1"]

    list1 = [len(i) for i in headers]
    # list1 = np.array(headerlen)

    if df.empty:
        list2 = list1
    else:
        list2 = [max([len(str(s)) for s in df[col].values]) for col in df.columns]

    def function(list1, list2):
        list3 = [max(value) for value in zip(list1, list2)]
        return list3

    for col_num, value in enumerate(function(list1, list2)):
        worksheet.set_column(col_num, col_num, value + 1)

    worksheet.merge_range('A1:O1', 'RADIOWEALTH FINANCE COMPANY, INC.', merge_format3)
    worksheet.merge_range('A2:O2', 'RFC360 Kwikredit', merge_format1)
    worksheet.merge_range('A3:O3', 'Memo Report', merge_format3)
    worksheet.merge_range('A4:O4', xldate_header, merge_format1)

    # the writer has done its job
    writer.close()

    # go back to the beginning of the stream
    output.seek(0)
    print('sending spreadsheet')
    filename = "Memo Report {}-{}.xlsx".format(dateStart, dateEnd)
    return send_file(output, attachment_filename=filename, as_attachment=True)


@app.route("/tat", methods=['GET'])
def tat():

    output = BytesIO()

    name = request.args.get('name')
    dateStart = request.args.get('startDate')
    dateEnd = request.args.get('endDate')

    payload = {'startDate': dateStart, 'endDate': dateEnd}

    # url = "https://3l8yr5jb35.execute-api.us-east-1.amazonaws.com/latest/newtat" #lambda-live
    url = "https://rekzfwhmj8.execute-api.us-east-1.amazonaws.com/latest/newtat" #lambda-test
    # url = "http://localhost:6999/newtat" #lambda-localhost

    r = requests.post(url, json=payload)
    data = r.json()
    standard = data['standard']
    returned = data['return']

    standard_df = pd.read_csv(StringIO(standard))
    returned_df = pd.read_csv(StringIO(returned))

    if standard_df.empty:
        nodisplayStandard = 'No Data'
    else:
        nodisplayStandard = ''

    if returned_df.empty:
        nodisplayReturned = 'No Data'
    else:
        nodisplayReturned = ''

    countStandard = standard_df.shape[0] + 8
    countReturned = returned_df.shape[0] + 8


    writer = pd.ExcelWriter(output, engine='xlsxwriter')
    standard_df.to_excel(writer, startrow=7, merge_cells=False, index=False, sheet_name="Standard", header=None)
    returned_df.to_excel(writer, startrow=7, merge_cells=False, index=False, sheet_name="Returned", header=None)

    workbook = writer.book
    merge_format2 = workbook.add_format(docNameStyle)
    merge_format4 = workbook.add_format(footerStyle)
    merge_format6 = workbook.add_format(entriesStyle)
    merge_format7 = workbook.add_format(headerStyle)
    xldate_header = "{} to {}".format(dateStart, dateEnd)

    worksheetStandard = writer.sheets["Standard"]

    # list1 = [len(i) for i in standard_df.columns.values]
    # # list1 = np.array(headerlen)
    #
    # if standard_df.empty:
    #     list2 = list1
    # else:
    #     list2 = [max([len(str(s)) for s in standard_df[col].values]) for col in standard_df.columns]
    #
    # def function(list1, list2):
    #     list3 = [max(value) for value in zip(list1, list2)]
    #     return list3
    #
    # for col_num, value in enumerate(function(list1, list2)):
    #     worksheetStandard.set_column(col_num, col_num, value + 1)

    range1 = 'O'
    range2 = 'P'
    range3 = 'R'
    reportTitle = 'TAT Report (Standard)'
    workSheet(workbook, worksheetStandard, range1, range2, range3, xldate_header, name, reportTitle)

    worksheetStandard.merge_range('A6:A7', 'App ID', merge_format7)
    worksheetStandard.merge_range('B6:B7', 'First Name', merge_format7)
    worksheetStandard.merge_range('C6:C7', "Last Name", merge_format7)
    worksheetStandard.merge_range('D6:D7', 'MLV', merge_format7)
    worksheetStandard.merge_range('E6:E7', 'PNV', merge_format7)
    worksheetStandard.merge_range('F6:F7', 'Application Date', merge_format7)
    worksheetStandard.merge_range('G6:G7', 'Application Time', merge_format7)
    worksheetStandard.merge_range('H6:H7', 'Product', merge_format7)
    worksheetStandard.merge_range('I6:I7', 'Status', merge_format7)
    worksheetStandard.merge_range('J6:J7', 'Pending - For Verification', merge_format7)
    worksheetStandard.merge_range('K6:K7', 'For Verification - For Adjudication', merge_format7)
    worksheetStandard.merge_range('L6:L7', 'For Verification - For Cancellation', merge_format7)
    worksheetStandard.merge_range('M6:M7', 'For Cancellation - Cancelled', merge_format7)
    worksheetStandard.merge_range('N6:N7', 'For Adjudication - For Approval', merge_format7)
    worksheetStandard.merge_range('O6:O7', 'For Approval - Approved', merge_format7)
    worksheetStandard.merge_range('P6:P7', 'For Approval - Disapproved', merge_format7)
    worksheetStandard.merge_range('Q6:Q7', 'Approved - For Releasing', merge_format7)
    worksheetStandard.merge_range('R6:R7', 'For Releasing - Released', merge_format7)

    worksheetStandard.merge_range('A{}:R{}'.format(countStandard, countStandard), nodisplayStandard, merge_format6)

    worksheetReturned = writer.sheets["Returned"]

    # list1 = [len(i) for i in returned_df.columns.values]
    # # list1 = np.array(headerlen)
    #
    # if returned_df.empty:
    #     list2 = list1
    # else:
    #     list2 = [max([len(str(s)) for s in returned_df[col].values]) for col in returned_df.columns]
    #
    # def function(list1, list2):
    #     list3 = [max(value) for value in zip(list1, list2)]
    #     return list3
    #
    # for col_num, value in enumerate(function(list1, list2)):
    #     worksheetReturned.set_column(col_num, col_num, value + 1)

    range1 = 'T'
    range2 = 'U'
    range3 = 'W'
    reportTitle = 'TAT Report (Returned)'
    workSheet(workbook, worksheetStandard, range1, range2, range3, xldate_header, name, reportTitle)

    worksheetReturned.merge_range('A6:A7', 'App ID', merge_format7)
    worksheetReturned.merge_range('B6:B7', 'First Name', merge_format7)
    worksheetReturned.merge_range('C6:C7', "Last Name", merge_format7)
    worksheetReturned.merge_range('D6:D7', 'MLV', merge_format7)
    worksheetReturned.merge_range('E6:E7', 'PNV', merge_format7)
    worksheetReturned.merge_range('F6:F7', 'Application Date', merge_format7)
    worksheetReturned.merge_range('G6:G7', 'Application Time', merge_format7)
    worksheetReturned.merge_range('H6:H7', 'Product', merge_format7)
    worksheetReturned.merge_range('I6:I7', 'Status', merge_format7)
    worksheetReturned.merge_range('J6:J7', 'Pending - For Verification', merge_format7)
    worksheetReturned.merge_range('K6:K7', 'For Verification - For Adjudication', merge_format7)
    worksheetReturned.merge_range('L6:L7', 'For Verification - For Cancellation', merge_format7)
    worksheetReturned.merge_range('M6:M7', 'For Cancellation - Cancelled', merge_format7)
    worksheetReturned.merge_range('N6:N7', 'For Adjudication - Reverify', merge_format7)
    worksheetReturned.merge_range('O6:O7', 'Reverify - For Adjudication', merge_format7)
    worksheetReturned.merge_range('P6:P7', 'For Adjudication - For Approval', merge_format7)
    worksheetReturned.merge_range('Q6:Q7', 'For Approval - Reverify', merge_format7)
    worksheetReturned.merge_range('R6:R7', 'For Approval - Readjudicate', merge_format7)
    worksheetReturned.merge_range('S6:S7', 'Readjudicate - For Approval', merge_format7)
    worksheetReturned.merge_range('T6:T7', 'For Approval - Approved', merge_format7)
    worksheetReturned.merge_range('U6:U7', 'For Approval - Disapproved', merge_format7)
    worksheetReturned.merge_range('V6:V7', 'Approved - For Releasing', merge_format7)
    worksheetReturned.merge_range('W6:W7', 'For Releasing - Released', merge_format7)

    worksheetReturned.merge_range('A{}:W{}'.format(countReturned, countReturned), nodisplayReturned, merge_format6)

    writer.close()
    output.seek(0)

    filename = "TAT {}-{}.xlsx".format(dateStart, dateEnd)
    return send_file(output, attachment_filename=filename, as_attachment=True)

@app.route("/oldtat", methods=['GET'])
def oldtat():
    output = BytesIO()

    dateStart = request.args.get('startDate')
    dateEnd = request.args.get('endDate')
    payload = {'startDate': dateStart, 'endDate': dateEnd}

    # url = "https://3l8yr5jb35.execute-api.us-east-1.amazonaws.com/latest/reports/newtat" #lambda-live
    url = "https://rekzfwhmj8.execute-api.us-east-1.amazonaws.com/latest/reports/newtat"  # lambda-test
    # url = "http://localhost:6999/newtat" #lambda-localhost

    r = requests.post(url, json=payload)
    data = r.json()
    standard = data['standard']
    returned = data['return']

    standard_df = pd.read_csv(StringIO(standard))
    returned_df = pd.read_csv(StringIO(returned))

    writer = pd.ExcelWriter(output, engine='xlsxwriter')
    standard_df.to_excel(writer, sheet_name="Standard", index=False)
    returned_df.to_excel(writer, sheet_name="Returned", index=False)

    writer.close()
    output.seek(0)

    filename = "TAT {}-{}.xlsx".format(dateStart, dateEnd)
    return send_file(output, attachment_filename=filename, as_attachment=True)


@app.route("/unappliedbalances", methods=['GET'])
def get_uabalances():
    output = BytesIO()

    name = request.args.get('name')
    date = request.args.get('date')
    payload = {}
    # url = "https://api360.zennerslab.com/Service1.svc/accountDueReportJSON"
    url = "https://rfc360-test.zennerslab.com/Service1.svc/accountDueReportJSON"
    r = requests.post(url, json=payload)
    data = r.json()

    # greater_than_zero = list(filter(lambda x: x['unappliedBalance'] > 0, data['accountDueReportJSONResult']))

    writer = pd.ExcelWriter(output, engine='xlsxwriter')
    headers = ["App ID", "Loan Account Number", "Customer Name", "Mobile Number", "Amount Due", "Due Date",
               "Unapplied Balance"]
    df = pd.DataFrame(data['accountDueReportJSONResult'])

    # print('df result: ', df)

    if df.empty:
        sum = 0
        count = df.shape[0] + 8
        nodisplay = 'No Data'
        df = pd.DataFrame(pd.np.empty((0, 7)))
    else:
        nodisplay = ''
        count = df.shape[0] + 8
        df["name"] = df['firstName'] + ' ' + df['middleName'] + ' ' + df['lastName'] + ' ' + df['suffix']
        df['loanId'] = df['loanId'].astype(int)
        df.sort_values(by=['loanId'], inplace=True)
        sum = pd.Series(df['unappliedBalance']).sum()
        df['loanAccountNo'] = df['loanAccountNo'].map(lambda x: x.lstrip("'"))
        df['dueDate'] = pd.to_datetime(df['dueDate'])
        df['dueDate'] = df['dueDate'].map(lambda x: x.strftime('%m/%d/%Y') if pd.notnull(x) else '')
        df = df[["loanId", "loanAccountNo", "name", "mobileNo", "amountDue", "dueDate", "unappliedBalance"]]

    df.to_excel(writer, startrow=7, merge_cells=False, index=False, sheet_name="Sheet_1", header=None)

    workbook = writer.book
    merge_format2 = workbook.add_format(docNameStyle)
    merge_format4 = workbook.add_format(footerStyle)
    merge_format6 = workbook.add_format(entriesStyle)
    merge_format7 = workbook.add_format(headerStyle)
    xldate_header = "As of {}".format(date)

    worksheet = writer.sheets["Sheet_1"]

    # list1 = [len(i) for i in headers]
    # # list1 = np.array(headerlen)
    #
    # if df.empty:
    #     list2 = list1
    # else:
    #     list2 = [max([len(str(s)) for s in df[col].values]) for col in df.columns]
    #
    # def function(list1, list2):
    #     list3 = [max(value) for value in zip(list1, list2)]
    #     return list3
    #
    # for col_num, value in enumerate(function(list1, list2)):
    #     worksheet.set_column(col_num, col_num, value + 1)

    range1 = 'D'
    range2 = 'E'
    range3 = 'G'
    reportTitle = 'Unapplied Balance Report'
    workSheet(workbook, worksheet, range1, range2, range3, xldate_header, name, reportTitle)

    worksheet.merge_range('A6:A7', 'App ID', merge_format7)
    worksheet.merge_range('B6:B7', 'Loan Acct. #', merge_format7)
    worksheet.merge_range('C6:C7', "Client's Name", merge_format7)
    worksheet.merge_range('D6:D7', 'Mobile Number', merge_format7)
    worksheet.merge_range('E6:E7', 'Amount Due', merge_format7)
    worksheet.merge_range('F6:F7', 'Due Date', merge_format7)
    worksheet.merge_range('G6:G7', 'Unapplied Balance', merge_format7)

    worksheet.merge_range('A{}:G{}'.format(count, count), nodisplay, merge_format6)
    worksheet.merge_range('A{}:B{}'.format(count + 1, count + 1), 'GRAND TOTAL:', merge_format2)
    worksheet.write('G{}'.format(count + 1), sum, merge_format4)

    # the writer has done its job
    writer.close()

    # go back to the beginning of the stream
    output.seek(0)
    print('sending spreadsheet')
    filename = "Unapplied Balance {}.xlsx".format(date)
    return send_file(output, attachment_filename=filename, as_attachment=True)



@app.route("/dccr", methods=['GET'])
def get_data():

    output = BytesIO()

    name = request.args.get('name')
    dateStart = request.args.get('startDate')
    dateEnd = request.args.get('endDate')

    payload = {'startDate': dateStart, 'endDate': dateEnd}
    # url = "https://api360.zennerslab.com/Service1.svc/DCCRjson"
    url = "https://rfc360-test.zennerslab.com/Service1.svc/DCCRjson"
    r = requests.post(url, json=payload)
    data_json = r.json()
    sortData = sorted(data_json['DCCRjsonResult'], key=lambda d: d['postedDate'], reverse=False)

    writer = pd.ExcelWriter(output, engine='xlsxwriter')
    headers = ["LOAN ACCT. #", "CLIENT'S", "MOBILE NUMBER", "OR #", "OR DATE", "NET CASH",
               "PAYMENT SOURCE"]
    df = pd.DataFrame(sortData)
    list1 = [len(i) for i in headers]

    if df.empty:
        count = df.shape[0] + 8
        nodisplay = 'No Data'
        df = pd.DataFrame(pd.np.empty((0, 7)))
        list2 = list1
    else:
        count = df.shape[0] + 8
        nodisplay = ''
        df["customerName"] = df['firstName'] + ' ' + df['middleName'] + ' ' + df['lastName'] + ' ' + df['suffix']
        df['amount'] = df['amount'].astype(float)
        df['loanAccountNo'] = df['loanAccountNo'].map(lambda x: x.lstrip("'"))
        df['postedDate'] = pd.to_datetime(df['postedDate'])
        df['postedDate'] = df['postedDate'].map(lambda x: x.strftime('%m/%d/%Y') if pd.notnull(x) else '')
        df = df[['loanAccountNo', 'customerName', 'mobileNo', 'orNo', "postedDate", "amount",
                 "paymentSource"]]
        list2 = [max([len(str(s)) for s in df[col].values]) for col in df.columns]

    df.to_excel(writer, startrow=7, merge_cells=False, index=False, sheet_name="Sheet_1", header=None)

    workbook = writer.book
    merge_format2 = workbook.add_format(docNameStyle)
    merge_format4 = workbook.add_format(footerStyle)
    merge_format6 = workbook.add_format(entriesStyle)
    merge_format7 = workbook.add_format(headerStyle)
    xldate_header = "{} to {}".format(dateStart, dateEnd)

    worksheet = writer.sheets["Sheet_1"]

    for col_num, value in enumerate(columnWidth(list1, list2)):
        worksheet.set_column(col_num, col_num, value + 1)

    range1 = 'D'
    range2 = 'E'
    range3 = 'G'
    companyName = 'Radiowealth Financial Services Corporation'
    reportTitle = 'Daily Cash/Check Report'
    branchName = 'Head Office'
    workSheet(workbook, worksheet, range1, range2, range3, xldate_header, name, companyName, reportTitle, branchName)

    headersList = [i for i in headers]

    for x, y in zip(alphabet(range3), headersList):
        worksheet.merge_range('{}6:{}7'.format(x, x), '{}'.format(y), merge_format7)

    worksheet.merge_range('A{}:G{}'.format(count, count), nodisplay, merge_format6)
    worksheet.merge_range('A{}:B{}'.format(count + 1, count + 1), 'GRAND TOTAL:', merge_format2)

    worksheet.write('F{}'.format(count + 1), '=SUM(F8:F{})'.format(count - 1), merge_format4)

    writer.close()

    output.seek(0)
    print('sending spreadsheet')
    filename = "DCCR {}-{}.xlsx".format(dateStart, dateEnd)
    return send_file(output, attachment_filename=filename, as_attachment=True)


@app.route("/newdccr", methods=['GET'])
def get_data1():

    output = BytesIO()

    name = request.args.get('name')
    dateStart = request.args.get('startDate')
    dateEnd = request.args.get('endDate')

    payload = {'startDate': dateStart, 'endDate': dateEnd}
    # url = "https://api360.zennerslab.com/Service1.svc/DCCRjsonNew"
    url = "https://rfc360-test.zennerslab.com/Service1.svc/DCCRjsonNew"
    r = requests.post(url, json=payload)
    data_json = r.json()

    sortData = sorted(data_json['DCCRjsonNewResult'], key=lambda d: d['postedDate'], reverse=False)
    # sortByPaymentSource = sorted(data_json['DCCRjsonNewResult'], key=lambda d: d['paymentSource'], reverse=False)
    writer = pd.ExcelWriter(output, engine='xlsxwriter')
    # writer1 = pd.ExcelWriter(output, engine='xlsxwriter')
    headers = ["#", "TRANSTYPE", "COLLECTOR", "DATE", "OR #", "CHECK #", "DATE DEPOSITED", "AMT DEPOSITED", "PAYMENT TYPE",
               "LOAN ACCT #", "CUSTOMER NAME", "TOTAL", "CASH", "CHECK", "PRINCIPAL", "ADVCANCES", "PENALTY (5%)",
               "PENALTY (5%)", "GIBCO", "HF", "DST", "PF", "NOTARIAL FEE", "GCLI", "OTHER FEES", "AMOUNT"]
    df = pd.DataFrame(sortData)
    df1 = pd.DataFrame(sortData)
    list1 = [len(i) for i in headers]

    if df.empty or df1.empty:
        count = df.shape[0] + 8
        count1 = 8
        nodisplay = 'No Data'
        df = pd.DataFrame(pd.np.empty((0, 25)))
        df1 = pd.DataFrame(pd.np.empty((0, 25)))
        list2 = list1
    else:
        count = df.shape[0] + 8

        count1 = 8
        nodisplay = ''
        conditions = [(df['paymentSource'] == 'Check')]
        df['loanAccountNo'] = df['loanAccountNo'].map(lambda x: x.lstrip("'"))
        df['total'] = np.select(conditions, [df['paymentCheck']], default=df['amount'])
        df['total1'] = np.select(conditions, [df['paymentCheck']], default=df['amount'])
        df1['total'] = np.select(conditions, [df1['paymentCheck']], default=df1['amount'])
        diff = df['total'] - (df['paidPrincipal'] + df['paidInterest'] + df['paidPenalty'])
        df['advances'] = round(diff, 2)
        # df['transType'] = ''
        # df['collector'] = ''
        df['gibco'] = 0
        df['hf'] = 0
        df['dst'] = 0
        df['pf'] = 0
        df['notarial'] = 0
        df['gcli'] = 0
        df['otherFees'] = 0
        df['amount1'] = 0
        df['description'] = ''
        df['num'] = numbers(df.shape[0])
        df1['num1'] = ''
        df['num1'] = ''
        df = round(df, 2)
        df1 = round(df, 2)
        dfCash = df1.loc[df['paymentSource'] == 'Cash']
        dfEcpay = df1.loc[df['paymentSource'] == 'Ecpay']
        dfBC = df1.loc[df['paymentSource'] == 'Bayad Center']
        dfBank = df1.loc[df['paymentSource'].isin(['Landbank','PNB','BDO','Metrobank','Unionbank'])]

        dfCashcount = dfCash.shape[0]
        dfEcpaycount = dfEcpay.shape[0]
        dfBCcount = dfBC.shape[0]
        dfBankcount = dfBank.shape[0]

        df = df[['num', 'transType', 'collector', 'orDate', 'orNo', 'checkNo', 'paymentDate', 'total1', 'paymentSource',
                 'loanAccountNo', 'customerName', 'total', 'amount', 'paymentCheck', 'paidPrincipal', 'paidInterest',
                 'advances', 'paidPenalty', 'gibco', 'hf', 'dst', 'pf', 'notarial', 'gcli', 'otherFees', 'amount1']]
        dfCash = dfCash[['num1', 'orDate', 'orNo', 'paymentSource', 'total', 'amount', 'paymentCheck']]
        dfEcpay = dfEcpay[['num1', 'orDate', 'orNo', 'paymentSource', 'total', 'amount', 'paymentCheck']]
        dfBC = dfBC[['num1', 'orDate', 'orNo', 'paymentSource', 'total', 'amount', 'paymentCheck']]
        dfBank = dfBank[['num1', 'orDate', 'orNo', 'paymentSource', 'total', 'amount', 'paymentCheck']]
        df2 = df1[['num1', 'num1', 'num1', 'num1']]
        list2 = [max([len(str(s)) for s in df[col].values]) for col in df.columns]

    workbook = writer.book
    merge_format2 = workbook.add_format(docNameStyle)
    merge_format4 = workbook.add_format(footerStyle)
    merge_format6 = workbook.add_format(entriesStyle)
    merge_format7 = workbook.add_format(headerStyle)
    merge_format8 = workbook.add_format(topBorderStyle)
    merge_format9 = workbook.add_format(borderFormatStyle)

    worksheet = workbook.add_worksheet('Sheet_1')
    writer.sheets['Sheet_1'] = worksheet
    df.to_excel(writer, startrow=7, merge_cells=False, index=False, sheet_name="Sheet_1", header=None)

    if(dfCashcount <= 0):
        # dfCash.to_excel(writer, startrow=count + 5, merge_cells=False, index=False, sheet_name="Sheet_1", header=None)
        dfEcpay.to_excel(writer, startrow=count + 10, merge_cells=False, index=False, sheet_name="Sheet_1", header=None)
        dfBC.to_excel(writer, startrow=count + dfEcpaycount + 15, merge_cells=False, index=False, sheet_name="Sheet_1", header=None)
        dfBank.to_excel(writer, startrow=count + dfEcpaycount + dfBCcount + 20, merge_cells=False, index=False, sheet_name="Sheet_1", header=None)
    elif (dfEcpaycount <= 0):
        dfCash.to_excel(writer, startrow=count + 5, merge_cells=False, index=False, sheet_name="Sheet_1", header=None)
        # dfEcpay.to_excel(writer, startrow=count + 5, merge_cells=False, index=False, sheet_name="Sheet_1", header=None)
        dfBC.to_excel(writer, startrow=count + dfCashcount + 15, merge_cells=False, index=False, sheet_name="Sheet_1", header=None)
        dfBank.to_excel(writer, startrow=count + dfCashcount + dfBCcount + 20, merge_cells=False, index=False, sheet_name="Sheet_1", header=None)
    elif (dfBCcount <= 0):
        dfCash.to_excel(writer, startrow=count + 5, merge_cells=False, index=False, sheet_name="Sheet_1", header=None)
        dfEcpay.to_excel(writer, startrow=count + dfCashcount + 10, merge_cells=False, index=False, sheet_name="Sheet_1", header=None)
        # dfBC.to_excel(writer, startrow=count + dfCashcount + 15, merge_cells=False, index=False, sheet_name="Sheet_1", header=None)
        dfBank.to_excel(writer, startrow=count + dfCashcount + dfEcpaycount + 20, merge_cells=False, index=False, sheet_name="Sheet_1", header=None)
    elif (dfBankcount <= 0):
        dfCash.to_excel(writer, startrow=count + 5, merge_cells=False, index=False, sheet_name="Sheet_1", header=None)
        dfEcpay.to_excel(writer, startrow=count + dfCashcount + 10, merge_cells=False, index=False, sheet_name="Sheet_1", header=None)
        dfBC.to_excel(writer, startrow=count + dfCashcount + dfEcpaycount + 15, merge_cells=False, index=False, sheet_name="Sheet_1", header=None)
        # dfBank.to_excel(writer, startrow=count + dfCashcount + dfEcpay + 10, merge_cells=False, index=False, sheet_name="Sheet_1", header=None)
    else:
        dfCash.to_excel(writer, startrow=count + 5, merge_cells=False, index=False, sheet_name="Sheet_1", header=None)
        dfEcpay.to_excel(writer, startrow=count + dfCashcount + 10, merge_cells=False, index=False, sheet_name="Sheet_1", header=None)
        dfBC.to_excel(writer, startrow=count + dfCashcount + dfEcpaycount + 15, merge_cells=False, index=False, sheet_name="Sheet_1", header=None)
        dfBank.to_excel(writer, startrow=count + dfCashcount + dfEcpaycount + dfBCcount + 20, merge_cells=False, index=False, sheet_name="Sheet_1", header=None)

    df2.to_excel(writer, startrow=count + count + 2, merge_cells=False, index=False, sheet_name="Sheet_1", header=None)

    for col_num, value in enumerate(columnWidth(list1, list2)):
        worksheet.set_column(col_num, col_num, value + 1)

    range1 = 'W'
    range2 = 'X'
    range3 = 'Z'
    companyName = 'RFC'
    reportTitle = 'DAILY CASH/CHECK COLLECTION (NET)'
    branchName = 'Head Office'
    xldate_header = "Period: {}-{}".format(dateStart, dateEnd)

    workSheet(workbook, worksheet, range1, range2, range3, xldate_header, name, companyName, reportTitle, branchName)

    headersList = [i for i in headers]

    for x, y in zip(alphabet(range3), headersList):
        if (x == 'L'):
            worksheet.write('L7', 'TOTAL', merge_format7)
        elif (x == 'M'):
            worksheet.write('M7', 'CASH', merge_format7)
        elif (x == 'N'):
            worksheet.write('N7', 'CHECK', merge_format7)
        elif (x == 'O'):
            worksheet.write('O7', 'PRINCIPAL', merge_format7)
        elif (x == 'P'):
            worksheet.write('P7', 'INTEREST', merge_format7)
        elif (x == 'Q'):
            worksheet.write('Q7', 'ADVANCES', merge_format7)
        elif (x == 'R'):
            worksheet.write('R7', 'PENALTY (5%)', merge_format7)
        elif (x == 'S'):
            worksheet.write('S7', 'GIBCO', merge_format7)
        elif (x == 'T'):
            worksheet.write('T7', 'HF', merge_format7)
        elif (x == 'U'):
            worksheet.write('U7', 'DST', merge_format7)
        elif (x == 'V'):
            worksheet.write('V7', 'PF', merge_format7)
        elif (x == 'W'):
            worksheet.write('W7', 'NOTARIAL FEE', merge_format7)
        elif (x == 'X'):
            worksheet.write('X7', 'GCLI', merge_format7)
        else:
            worksheet.merge_range('{}6:{}7'.format(x, x), '{}'.format(y), merge_format7)

    worksheet.merge_range('L6:N6', 'AMOUNT', merge_format7)
    worksheet.merge_range('O6:R6', 'LOAN REPAYMENT', merge_format7)
    worksheet.merge_range('S6:X6', 'ONE TIME PAYMENT', merge_format7)

    worksheet.merge_range('K{}:Z{}'.format(count, count), nodisplay, merge_format6)
    worksheet.write('K{}'.format(count + 1), 'TOTAL:', merge_format2)
    worksheet.merge_range('A{}:Z{}'.format(count + 2, count + 2), nodisplay, merge_format8)

    for c in range(ord('L'), ord('Z') + 1):
            worksheet.write('{}{}'.format(chr(c), count + 1), "=SUM({}8:{}{})".format(chr(c), chr(c), count - 1),
                            merge_format4)

    paymentTypeWorksheet(worksheet, count, 0, 0, 0, 0, 'CASH', merge_format7)
    paymentTypeWorksheet(worksheet, count, dfCashcount + 5, 0, 0, 0, 'ECPAY', merge_format7)
    paymentTypeWorksheet(worksheet, count, dfCashcount + 5, dfEcpaycount + 5, 0, 0, 'BAYAD CENTER', merge_format7)
    paymentTypeWorksheet(worksheet, count, dfCashcount + 5, dfEcpaycount + 5, dfBCcount + 5, 0, 'BANK', merge_format7)

    sumPaymentType(worksheet, count, dfCashcount, 0, 0, 0, count, count + dfCashcount,  merge_format4)
    sumPaymentType(worksheet, count, dfCashcount, dfEcpaycount + 5, 0, 0, count + dfCashcount + 5, count + dfCashcount + dfEcpaycount + 5, merge_format4)
    sumPaymentType(worksheet, count, dfCashcount, dfEcpaycount + 5, dfBCcount + 5, 0, count + dfCashcount + dfEcpaycount + 10, count + dfCashcount + dfEcpaycount + dfBCcount + 10, merge_format4)
    sumPaymentType(worksheet, count, dfCashcount, dfEcpaycount + 5, dfBCcount + 5, dfBankcount + 5, count + dfCashcount + dfEcpaycount + dfBCcount + 15, count + dfCashcount + dfEcpaycount + dfBCcount + dfBankcount + 15, merge_format4)

    totalPaymentType(worksheet, count, dfCashcount, 0, 0, 0, nodisplay, merge_format2, merge_format6, merge_format8, merge_format4)
    totalPaymentType(worksheet, count, dfCashcount, dfEcpaycount + 5, 0, 0, nodisplay, merge_format2, merge_format6, merge_format8, merge_format4)
    totalPaymentType(worksheet, count, dfCashcount, dfEcpaycount + 5, dfBCcount + 5, 0, nodisplay, merge_format2, merge_format6, merge_format8, merge_format4)
    totalPaymentType(worksheet, count, dfCashcount, dfEcpaycount + 5, dfBCcount + 5, dfBankcount + 5, nodisplay, merge_format2, merge_format6, merge_format8, merge_format4)

    worksheet.merge_range('B{}:D{}'.format(count + dfCashcount + dfEcpaycount + 5 + dfBCcount + 5 + dfBankcount + 5 + 9, count + dfCashcount + dfEcpaycount + 5 + dfBCcount + 5 + dfBankcount + 5 + 9), 'DISBURSMENT', merge_format7)
    worksheet.write('B{}'.format(count + dfCashcount + dfEcpaycount + 5 + dfBCcount + 5 + dfBankcount + 5 + 8 + 2), 'DATE', merge_format7)
    worksheet.write('C{}'.format(count + dfCashcount + dfEcpaycount + 5 + dfBCcount + 5 + dfBankcount + 5 + 8 + 2), 'DESCRIPTION', merge_format7)
    worksheet.write('D{}'.format(count + dfCashcount + dfEcpaycount + 5 + dfBCcount + 5 + dfBankcount + 5 + 8 + 2), 'AMOUNT', merge_format7)
    worksheet.write('B{}'.format(count + dfCashcount + dfEcpaycount + 5 + dfBCcount + 5 + dfBankcount + 5 + 8 + 4), 'TOTAL:', merge_format2)
    worksheet.write('D{}'.format(count + dfCashcount + dfEcpaycount + 5 + dfBCcount + 5 + dfBankcount + 5 + 8 + 4), "=SUM(D{}:D{})".format(count + count1 - 1, count + count + count1 - 5), merge_format9)
    worksheet.write('B{}'.format(count + dfCashcount + dfEcpaycount + 5 + dfBCcount + 5 + dfBankcount + 5 + 9 + 5), 'NET COLLECTION:', merge_format2)
    worksheet.write('D{}'.format(count + dfCashcount + dfEcpaycount + 5 + dfBCcount + 5 + dfBankcount + 5 + 9 + 5), "=E{}-D{}".format(count + count - 1, count + count + count1 - 4),
                    merge_format9)
    # worksheet.write('C{}'.format(count + count + 1), nodisplay, merge_format8)

    writer.close()

    # go back to the beginning of the stream
    output.seek(0)
    print('sending spreadsheet')
    filename = "DCCR {}-{}.xlsx".format(dateStart, dateEnd)
    return send_file(output, attachment_filename=filename, as_attachment=True)


@app.route("/dccr2", methods=['GET'])
def get_data2():
    output = 'test.xlsx'
    dateStart = request.args.get('startDate')
    dateEnd = request.args.get('endDate')
    filename = "DCCR {}-{}.xlsx".format(dateStart, dateEnd)

    payload = {'startDate': dateStart, 'endDate': dateEnd}
    # url = "https://api360.zennerslab.com/Service1.svc/DCCRjson"
    url = "https://rfc360-test.zennerslab.com/Service1.svc/DCCRjson"
    r = requests.post(url, json=payload)
    data_json = r.json()

    writer = pd.ExcelWriter(filename, engine='xlsxwriter')
    headers = ["Loan Account Number", "Customer Name", "Mobile Number", "OR Number", "OR Date", "Net Cash",
               "Payment Source"]
    df = pd.DataFrame(data_json['DCCRjsonResult'])
    df = df[['loanAccountNo', 'customerName', 'mobileno', 'orNo', "postedDate", "amountApplied", "paymentSource"]]
    df.to_excel(writer, startrow=5, merge_cells=False, index=False, sheet_name="Sheet_1", header=headers)

    workbook = writer.book
    merge_format1 = workbook.add_format({'align': 'center'})
    merge_format3 = workbook.add_format({'bold': True, 'align': 'center'})
    xldate_header = "For the Period {} to {}".format(dateStart, dateEnd)

    worksheet = writer.sheets["Sheet_1"]
    worksheet.merge_range('A1:G1', 'RADIOWEALTH FINANCE COMPANY, INC.', merge_format3)
    worksheet.merge_range('A2:G2', 'RFC360 Kwikredit', merge_format1)
    worksheet.merge_range('A3:G3', 'Daily Cash Collection Report', merge_format3)
    worksheet.merge_range('A4:G4', xldate_header, merge_format1)

    writer.save()

    print('sending spreadsheet')
    send_mail("cu.michaels@gmail.com", "jantzen@thegentlemanproject.com", "hello", "helloworld", filename,
              'smtp.gmail.com', '587', 'cu.michaels@gmail.com', 'jantzen216')
    return 'ok'
    # return send_file(output, attachment_filename=filename, as_attachment=True)

@app.route("/newmonthlyincome", methods=['GET'])
def get_monthly1():

    output = BytesIO()

    date = request.args.get('date')
    name = request.args.get('name')
    datetime_object = datetime.strptime(date, '%m/%d/%Y')
    month = datetime_object.strftime("%B")

    payload = {'date': date}
    # url = "https://api360.zennerslab.com/Service1.svc/monthlyIncomeReportJs"
    url = "https://rfc360-test.zennerslab.com/Service1.svc/monthlyIncomeReportJs"
    r = requests.post(url, json=payload)
    data_json = r.json()

    writer = pd.ExcelWriter(output, engine='xlsxwriter')
    headers = ["App ID", "Loan Account Number", "Customer Name", "Penalty Paid",
               "Interest Paid", "Principal Paid", "Unapplied Balance", "Payment Amount", "OR Date", "OR Number"]
    df = pd.DataFrame(data_json['monthlyIncomeReportJsResult'])
    # df.sort_values(by=['appId','orDate'])

    if df.empty:
        count = df.shape[0] + 8
        sumPenalty = 0
        sumInterest = 0
        sumPrincipal = 0
        sumUnapplied = 0
        total = 0
        nodisplay = 'No Data'
        df = pd.DataFrame(pd.np.empty((0, 10)))
    else:
        count = df.shape[0] + 8
        nodisplay = ''
        df['loanAccountno'] = df['loanAccountno'].map(lambda x: x.lstrip("'"))
        df['appId'] = df['appId'].astype(int)
        df["name"] = df['firstName'] + ' ' + df['middleName'] + ' ' + df['lastName'] + ' ' + df['suffix']
        df.sort_values(by=['appId', 'orDate'], inplace=True)
        df["unappliedBalance"] = df['orAmount'] - (df['penaltyPaid'] + df['interestPaid'] + df['principalPaid'])
        df['unappliedBalance'] = round(df["unappliedBalance"], 2)
        sumPenalty = pd.Series(df['penaltyPaid']).sum()
        sumInterest = pd.Series(df['interestPaid']).sum()
        sumPrincipal = pd.Series(df['principalPaid']).sum()
        sumUnapplied = pd.Series(df['unappliedBalance']).sum()
        total = pd.Series(df['paymentAmount']).sum()
        df = df[['appId', 'loanAccountno', 'name', "penaltyPaid", "interestPaid", "principalPaid", "unappliedBalance",
                 'orAmount', "orDate", "orNo"]]
    df.to_excel(writer, startrow=7, merge_cells=False, index=False, sheet_name="Sheet_1", header=None)

    workbook = writer.book
    merge_format2 = workbook.add_format(docNameStyle)
    merge_format4 = workbook.add_format(footerStyle)
    merge_format6 = workbook.add_format(entriesStyle)
    merge_format7 = workbook.add_format(headerStyle)
    xldate_header = "For the month of {}".format(month)

    worksheet = writer.sheets["Sheet_1"]

    # list1 = [len(i) for i in headers]
    # # list1 = np.array(headerlen)
    #
    # if df.empty:
    #     list2 = list1
    # else:
    #     list2 = [max([len(str(s)) for s in df[col].values]) for col in df.columns]
    #
    # def function(list1, list2):
    #     list3 = [max(value) for value in zip(list1, list2)]
    #     return list3
    #
    # for col_num, value in enumerate(function(list1, list2)):
    #     worksheet.set_column(col_num, col_num, value + 1)

    range1 = 'G'
    range2 = 'H'
    range3 = 'J'
    reportTitle = 'Mothly Income Report'
    workSheet(workbook, worksheet, range1, range2, range3, xldate_header, name, reportTitle)

    worksheet.merge_range('A6:A7', 'App ID', merge_format7)
    worksheet.merge_range('B6:B7', "Loan Acct. #", merge_format7)
    worksheet.merge_range('C6:C7', "Client's Name", merge_format7)
    worksheet.merge_range('D6:D7', 'Penalty Paid', merge_format7)
    worksheet.merge_range('E6:E7', 'Interest Paid', merge_format7)
    worksheet.merge_range('F6:F7', 'Principal Paid', merge_format7)
    worksheet.merge_range('G6:G7', 'Unapplied Balance', merge_format7)
    worksheet.merge_range('H6:H7', 'Payment Amount', merge_format7)
    worksheet.merge_range('I6:I7', 'OR Date', merge_format7)
    worksheet.merge_range('J6:J7', 'OR #', merge_format7)

    worksheet.merge_range('A{}:J{}'.format(count, count), nodisplay, merge_format6)
    worksheet.merge_range('A{}:B{}'.format(count + 1, count + 1), 'GRAND TOTAL:', merge_format2)
    worksheet.write('D{}'.format(count + 1), sumPenalty, merge_format4)
    worksheet.write('E{}'.format(count + 1), sumInterest, merge_format4)
    worksheet.write('F{}'.format(count + 1), sumPrincipal, merge_format4)
    worksheet.write('G{}'.format(count + 1), sumUnapplied, merge_format4)
    worksheet.write('H{}'.format(count + 1), total, merge_format4)

    writer.close()

    output.seek(0)
    print('sending spreadsheet')
    filename = "Monthly Income {}.xlsx".format(date)
    return send_file(output, attachment_filename=filename, as_attachment=True)

@app.route("/monthlyincome", methods=['GET'])
def get_monthly():

    output = BytesIO()

    date = request.args.get('date')
    name = request.args.get('name')
    datetime_object = datetime.strptime(date, '%m/%d/%Y')
    month = datetime_object.strftime("%B")

    payload = {'date': date}
    # url = "https://api360.zennerslab.com/Service1.svc/monthlyIncomeReportJs"
    url = "https://rfc360-test.zennerslab.com/Service1.svc/monthlyIncomeReportJs"
    r = requests.post(url, json=payload)
    data_json = r.json()

    writer = pd.ExcelWriter(output, engine='xlsxwriter')
    headers = ["App ID", "Loan Account Number", "Customer Name", "Penalty Paid",
               "Interest Paid", "Principal Paid", "Unapplied Balance", "Payment Amount", "OR Date", "OR Number"]
    df = pd.DataFrame(data_json['monthlyIncomeReportJsResult'])

    if df.empty:
        count = df.shape[0] + 8
        sumPenalty = 0
        sumInterest = 0
        sumPrincipal = 0
        sumUnapplied = 0
        total = 0
        nodisplay = 'No Data'
        df = pd.DataFrame(pd.np.empty((0, 10)))
    else:
        count = df.shape[0] + 8
        nodisplay = ''
        df['loanAccountno'] = df['loanAccountno'].map(lambda x: x.lstrip("'"))
        df['appId'] = df['appId'].astype(int)
        df["name"] = df['firstName'] + ' ' + df['middleName'] + ' ' + df['lastName'] + ' ' + df['suffix']
        df.sort_values(by=['appId'], inplace=True)
        sumPenalty = pd.Series(df['penaltyPaid']).sum()
        sumInterest = pd.Series(df['interestPaid']).sum()
        sumPrincipal = pd.Series(df['principalPaid']).sum()
        sumUnapplied = pd.Series(df['unappliedBalance']).sum()
        total = pd.Series(df['paymentAmount']).sum()
        df = df[['appId', 'loanAccountno', 'name', "penaltyPaid", "interestPaid", "principalPaid", "unappliedBalance",
                 'paymentAmount', "orDate", "orNo"]]
    df.to_excel(writer, startrow=7, merge_cells=False, index=False, sheet_name="Sheet_1", header=None)

    workbook = writer.book
    merge_format2 = workbook.add_format(docNameStyle)
    merge_format4 = workbook.add_format(footerStyle)
    merge_format6 = workbook.add_format(entriesStyle)
    merge_format7 = workbook.add_format(headerStyle)
    xldate_header = "For the month of {}".format(month)

    worksheet = writer.sheets["Sheet_1"]

    # list1 = [len(i) for i in headers]
    # # list1 = np.array(headerlen)
    #
    # if df.empty:
    #     list2 = list1
    # else:
    #     list2 = [max([len(str(s)) for s in df[col].values]) for col in df.columns]
    #
    # def function(list1, list2):
    #     list3 = [max(value) for value in zip(list1, list2)]
    #     return list3
    #
    # for col_num, value in enumerate(function(list1, list2)):
    #     worksheet.set_column(col_num, col_num, value + 1)

    range1 = 'G'
    range2 = 'H'
    range3 = 'J'
    reportTitle = 'Mothly Income Report'
    workSheet(workbook, worksheet, range1, range2, range3, xldate_header, name, reportTitle)

    worksheet.merge_range('A6:A7', 'App ID', merge_format7)
    worksheet.merge_range('B6:B7', "Loan Acct. #", merge_format7)
    worksheet.merge_range('C6:C7', "Client's Name", merge_format7)
    worksheet.merge_range('D6:D7', 'Penalty Paid', merge_format7)
    worksheet.merge_range('E6:E7', 'Interest Paid', merge_format7)
    worksheet.merge_range('F6:F7', 'Principal Paid', merge_format7)
    worksheet.merge_range('G6:G7', 'Unapplied Balance', merge_format7)
    worksheet.merge_range('H6:H7', 'Payment Amount', merge_format7)
    worksheet.merge_range('I6:I7', 'OR Date', merge_format7)
    worksheet.merge_range('J6:J7', 'OR #', merge_format7)

    worksheet.merge_range('A{}:J{}'.format(count, count), nodisplay, merge_format6)
    worksheet.merge_range('A{}:B{}'.format(count + 1, count + 1), 'GRAND TOTAL:', merge_format2)
    worksheet.write('D{}'.format(count + 1), sumPenalty, merge_format4)
    worksheet.write('E{}'.format(count + 1), sumInterest, merge_format4)
    worksheet.write('F{}'.format(count + 1), sumPrincipal, merge_format4)
    worksheet.write('G{}'.format(count + 1), sumUnapplied, merge_format4)
    worksheet.write('H{}'.format(count + 1), total, merge_format4)

    writer.close()

    output.seek(0)
    print('sending spreadsheet')
    filename = "Monthly Income {}.xlsx".format(date)
    return send_file(output, attachment_filename=filename, as_attachment=True)


@app.route("/monthlyincome2", methods=['GET'])
def get_monthly2():

    output = BytesIO()

    date = request.args.get('date')
    name = request.args.get('name')
    datetime_object = datetime.strptime(date, '%m/%d/%Y')
    month = datetime_object.strftime("%B")

    payload = {'date': date}
    # url = "https://api360.zennerslab.com/Service1.svc/monthlyIncomeReportJs"
    url = "https://rfc360-test.zennerslab.com/Service1.svc/monthlyIncomeReportJs"
    r = requests.post(url, json=payload)
    data_json = r.json()

    writer = pd.ExcelWriter(output, engine='xlsxwriter')
    headers = ["App ID", "Loan Account Number", "Customer Name", "Penalty Paid",
               "Interest Paid", "Principal Paid", "Unapplied Balance", "Payment Amount"]
    df = pd.DataFrame(data_json['monthlyIncomeReportJsResult'])

    if df.empty:
        count = df.shape[0] + 8
        sumPenalty = 0
        sumInterest = 0
        sumPrincipal = 0
        sumUnapplied = 0
        total = 0
        nodisplay = 'No Data'
        df = pd.DataFrame(pd.np.empty((0, 8)))
    else:
        count = df.shape[0] + 8
        nodisplay = ''
        df['loanAccountno'] = df['loanAccountno'].map(lambda x: x.lstrip("'"))
        df['appId'] = df['appId'].astype(int)
        df["name"] = df['firstName'] + ' ' + df['middleName'] + ' ' + df['lastName'] + ' ' + df['suffix']
        df.sort_values(by=['appId'], inplace=True)
        sumPenalty = pd.Series(df['penaltyPaid']).sum()
        sumInterest = pd.Series(df['interestPaid']).sum()
        sumPrincipal = pd.Series(df['principalPaid']).sum()
        sumUnapplied = pd.Series(df['unappliedBalance']).sum()
        total = pd.Series(df['paymentAmount']).sum()
        df = df[['appId', 'loanAccountno', 'name', "penaltyPaid", "interestPaid", "principalPaid", "unappliedBalance",
                 'paymentAmount']]
    df.to_excel(writer, startrow=5, merge_cells=False, index=False, sheet_name="Sheet_1", header=headers)

    workbook = writer.book
    merge_format1 = workbook.add_format(periodStyle)
    merge_format2 = workbook.add_format(docNameStyle)
    merge_format3 = workbook.add_format(comNameStyle)
    merge_format4 = workbook.add_format(footerStyle)
    merge_format5 = workbook.add_format(generatedStyle)
    merge_format6 = workbook.add_format(entriesStyle)
    merge_format7 = workbook.add_format(headerStyle)
    xldate_header = "For the month of {}".format(month)

    worksheet = writer.sheets["Sheet_1"]

    list1 = [len(i) for i in headers]
    # list1 = np.array(headerlen)

    if df.empty:
        list2 = list1
    else:
        list2 = [max([len(str(s)) for s in df[col].values]) for col in df.columns]

    def function(list1, list2):
        list3 = [max(value) for value in zip(list1, list2)]
        return list3

    for col_num, value in enumerate(function(list1, list2)):
        worksheet.set_column(col_num, col_num, value + 1)

    worksheet.merge_range('A1:H1', 'RADIOWEALTH FINANCE COMPANY, INC.', merge_format3)
    worksheet.merge_range('A2:H2', 'RFC360 Kwikredit', merge_format1)
    worksheet.merge_range('A3:H3', 'Monthly Income Report', merge_format3)
    worksheet.merge_range('A4:H4', xldate_header, merge_format1)
    worksheet.merge_range('A{}:H{}'.format(count - 1, count - 1), nodisplay, merge_format1)
    worksheet.write('C{}'.format(count + 1), 'TOTAL', merge_format3)
    worksheet.write('D{}'.format(count + 1), sumPenalty, merge_format4)
    worksheet.write('E{}'.format(count + 1), sumInterest, merge_format4)
    worksheet.write('F{}'.format(count + 1), sumPrincipal, merge_format4)
    worksheet.write('G{}'.format(count + 1), sumUnapplied, merge_format4)
    worksheet.write('H{}'.format(count + 1), total, merge_format4)
    worksheet.merge_range('A{}:H{}'.format(count + 3, count + 3), 'Report Generated By :', merge_format2)
    worksheet.merge_range('A{}:H{}'.format(count + 4, count + 5), name, merge_format2)
    worksheet.merge_range('A{}:H{}'.format(count + 7, count + 7), 'Date & Time Report Generation ({})'.format(dateNow),
                          merge_format2)

    writer.close()

    output.seek(0)
    print('sending spreadsheet')
    filename = "Monthly Income {}.xlsx".format(date)
    return send_file(output, attachment_filename=filename, as_attachment=True)


@app.route("/booking", methods=['GET'])
def get_booking():

    output = BytesIO()

    name = request.args.get('name')
    dateStart = request.args.get('startDate')
    dateEnd = request.args.get('endDate')

    payload = {'startDate': dateStart, 'endDate': dateEnd}
    url = "https://api360.zennerslab.com/Service1.svc/bookingReportJs"
    # url = "https://rfc360-test.zennerslab.com/Service1.svc/bookingReportJs"
    r = requests.post(url, json=payload)
    data_json = r.json()

    writer = pd.ExcelWriter(output, engine='xlsxwriter')
    headers = ["APP ID", "LOAN ACCT. #", "CLIENT'S NAME", "SUB PRODUCT", "PNV", "MLV", "FINANCE FEE",
               "GCLI", "HF", "OMA", "TERM", "RATE", "MI", "BOOKING DATE", "APPROVAL DATE",
               "APPLICATION DATE", "BRANCH", "PROMO NAME"]
    df = pd.DataFrame(data_json['bookingReportJsResult'])
    list1 = [len(i) for i in headers]

    if df.empty:
        count = df.shape[0] + 8
        nodisplay = 'No Data'
        df = pd.DataFrame(pd.np.empty((0, 17)))
        list2 = list1
    else:
        nodisplay = ''
        df['loanAccountNo'] = df['loanAccountNo'].map(lambda x: x.lstrip("'"))
        df['forreleasingdate'] = df.forreleasingdate.apply(lambda x: x.split(" ")[0])
        df['approvalDate'] = df.approvalDate.apply(lambda x: x.split(" ")[0])
        df['applicationDate'] = df.applicationDate.apply(lambda x: x.split(" ")[0])
        df["customerName"] = df['firstName'] + ' ' + df['middleName'] + ' ' + df['lastName'] + ' ' + df['suffix']
        df['loanId'] = df['loanId'].astype(int)
        df['term'] = df['term'].astype(int)
        df['actualRate'] = df['actualRate'].astype(float)
        df.sort_values(by=['loanId'], inplace=True)
        count = df.shape[0] + 8
        df = df[['loanId', 'loanAccountNo', 'customerName', "subProduct", "PNV", "principal", "interest", "insurance",
                 "handlingFee", "otherFees", "term", "actualRate", "monthlyAmount", "forreleasingdate", 'approvalDate',
                 'applicationDate', 'branch', 'promoName']]
        list2 = [max([len(str(s)) for s in df[col].values]) for col in df.columns]

    df.to_excel(writer, startrow=7, merge_cells=False, index=False, sheet_name="Sheet_1", header=None)

    workbook = writer.book
    merge_format2 = workbook.add_format(docNameStyle)
    merge_format4 = workbook.add_format(footerStyle)
    merge_format6 = workbook.add_format(entriesStyle)
    merge_format7 = workbook.add_format(headerStyle)

    xldate_header = "{} to {}".format(dateStart, dateEnd)

    worksheet = writer.sheets["Sheet_1"]

    for col_num, value in enumerate(columnWidth(list1, list2)):
        worksheet.set_column(col_num, col_num, value + 1)

    range1 = 'O'
    range2 = 'P'
    range3 = 'R'
    companyName = 'Radiowealth Financial Services Corporation'
    reportTitle = 'Booking Report'
    branchName = 'Head Office'
    workSheet(workbook, worksheet, range1, range2, range3, xldate_header, name, companyName, reportTitle, branchName)

    headersList = [i for i in headers]

    for x, y in zip(alphabet(range3), headersList):
        worksheet.merge_range('{}6:{}7'.format(x, x), '{}'.format(y), merge_format7)

    worksheet.merge_range('A{}:R{}'.format(count, count), nodisplay, merge_format6)
    worksheet.merge_range('A{}:B{}'.format(count + 1, count + 1), 'GRAND TOTAL:', merge_format2)

    for c in range(ord('E'), ord('J') + 1):
        worksheet.write('{}{}'.format(chr(c), count + 1), "=SUM({}8:{}{})".format(chr(c), chr(c), count - 1),
                        merge_format4)
    worksheet.write('M{}'.format(count + 1), "=SUM(M8:M{})".format(count - 1), merge_format4)

    writer.close()

    output.seek(0)
    print('sending spreadsheet')
    filename = "Booking Report {}-{}.xlsx".format(dateStart, dateEnd)
    return send_file(output, attachment_filename=filename, as_attachment=True)


@app.route("/incentive", methods=['GET'])
def get_incentive():

    output = BytesIO()

    dateStart = request.args.get('startDate')
    dateEnd = request.args.get('endDate')
    name = request.args.get('name')

    payload = {'startDate': dateStart, 'endDate': dateEnd}
    # url = "https://api360.zennerslab.com/Service1.svc/generateincentiveReportJSON"
    url = "https://rfc360-test.zennerslab.com/Service1.svc/generateincentiveReportJSON"
    r = requests.post(url, json=payload)
    data_json = r.json()

    writer = pd.ExcelWriter(output, engine='xlsxwriter')
    headers = ["Booking Date", "App ID", "Customer Name", "Referral Type", "SA", "Branch", "Loan Type",  "Term", "MLV", "PNV",
               "MI", "Referrer"]
    df = pd.DataFrame(data_json['generateincentiveReportJSONResult'])

    if df.empty:
        count = df.shape[0] + 8
        PNVsum = 0
        monthlyAmountsum = 0
        totalAmountsum = 0
        nodisplay = 'No Data'
        df = pd.DataFrame(pd.np.empty((0, 12)))
    else:
        count = df.shape[0] + 8
        nodisplay = ''
        df["borrowerName"] = df['firstName'] + ' ' + df['middleName'] + ' ' + df['lastName'] + ' ' + df['suffix']
        df['loanId'] = df['loanId'].astype(int)
        df.sort_values(by=['agentName'], inplace=True)
        PNVsum = pd.Series(df['PNV']).sum()
        monthlyAmountsum = pd.Series(df['monthlyAmount']).sum()
        totalAmountsum = pd.Series(df['totalAmount']).sum()
        df['bookingDate'] = pd.to_datetime(df['bookingDate'])
        df['bookingDate'] = df['bookingDate'].map(lambda x: x.strftime('%m/%d/%Y') if pd.notnull(x) else '')
        df = df[
            ['bookingDate', 'loanId', 'borrowerName', 'refferalType', "SA", "dealerName", "loanType", "term",
             "totalAmount", "PNV", "monthlyAmount", "agentName"]]

    df.to_excel(writer, startrow=7, merge_cells=False, index=False, sheet_name="Sheet_1", header=None)

    workbook = writer.book
    merge_format2 = workbook.add_format(docNameStyle)
    merge_format4 = workbook.add_format(footerStyle)
    merge_format6 = workbook.add_format(entriesStyle)
    merge_format7 = workbook.add_format(headerStyle)
    xldate_header = "{} to {}".format(dateStart, dateEnd)

    worksheet = writer.sheets["Sheet_1"]

    # list1 = [len(i) for i in headers]
    # # list1 = np.array(headerlen)
    #
    # if df.empty:
    #     list2 = list1
    # else:
    #     list2 = [max([len(str(s)) for s in df[col].values]) for col in df.columns]
    #
    # def function(list1, list2):
    #     list3 = [max(value) for value in zip(list1, list2)]
    #     return list3
    #
    # for col_num, value in enumerate(function(list1, list2)):
    #     worksheet.set_column(col_num, col_num, value + 1)

    range1 = 'I'
    range2 = 'J'
    range3 = 'L'
    reportTitle = 'Sales Referral Report'
    workSheet(workbook, worksheet, range1, range2, range3, xldate_header, name, reportTitle)

    worksheet.merge_range('A6:A7', 'Booking Date', merge_format7)
    worksheet.merge_range('B6:B7', "App ID", merge_format7)
    worksheet.merge_range('C6:C7', "Client's Name", merge_format7)
    worksheet.merge_range('D6:D7', 'Referral Type', merge_format7)
    worksheet.merge_range('E6:E7', 'SA', merge_format7)
    worksheet.merge_range('F6:F7', 'Branch', merge_format7)
    worksheet.merge_range('G6:G7', 'Loan Type', merge_format7)
    worksheet.merge_range('H6:H7', 'Term', merge_format7)
    worksheet.merge_range('I6:I7', 'MLV', merge_format7)
    worksheet.merge_range('J6:J7', 'PNV', merge_format7)
    worksheet.merge_range('K6:K7', 'MI', merge_format7)
    worksheet.merge_range('L6:L7', 'REFERRER', merge_format7)

    worksheet.merge_range('A{}:L{}'.format(count, count), nodisplay, merge_format6)
    worksheet.merge_range('A{}:B{}'.format(count + 1, count + 1), 'GRAND TOTAL:', merge_format2)

    worksheet.write('I{}'.format(count + 1), totalAmountsum, merge_format4)
    worksheet.write('J{}'.format(count + 1), PNVsum, merge_format4)
    worksheet.write('K{}'.format(count + 1), monthlyAmountsum, merge_format4)

    writer.close()

    output.seek(0)
    print('sending spreadsheet')
    filename = "Sales Referral Report {}-{}.xlsx".format(dateStart, dateEnd)
    return send_file(output, attachment_filename=filename, as_attachment=True)


@app.route("/mature", methods=['GET'])
def get_mature():

    output = BytesIO()

    date = request.args.get('date')
    name = request.args.get('name')

    payload = {'date': date}
    # url = "https://api360.zennerslab.com/Service1.svc/maturedLoanReport"
    url = "https://rfc360-test.zennerslab.com/Service1.svc/maturedLoanReport"
    r = requests.post(url, json=payload)
    data_json = r.json()

    writer = pd.ExcelWriter(output, engine='xlsxwriter')
    headers = ["App ID", "Loan Account Number", "Customer Name", "Mobile Number", "Term", "bMLV", "Last Due Date",
               "Last Payment", "No. of Unpaid Months", "Total Payment", "Total Past Due", "Outstanding Balance",
               "No. of Months from Maturity"]
    df = pd.DataFrame(data_json['maturedLoanReportResult'])

    if df.empty:
        count = df.shape[0] + 8
        bMLVsum = 0
        totalPaymentSum = 0
        monthlydueSum = 0
        outStandingBalanceSum = 0
        nodisplay = 'No Data'
        df = pd.DataFrame(pd.np.empty((0, 13)))
    else:
        count = df.shape[0] + 8
        nodisplay = ''
        df['loanAccountNo'] = df['loanAccountNo'].map(lambda x: x.lstrip("'"))
        df['monthlydue'] = df['monthlydue'].astype(float)
        df['outStandingBalance'] = df['outStandingBalance'].astype(float)
        df['loanId'] = df['loanId'].astype(int)
        df["fullName"] = df['firstName'] + ' ' + df['middleName'] + ' ' + df['lastName'] + ' ' + df['suffix']
        df.sort_values(by=['loanId'], inplace=True)
        bMLVsum = pd.Series(df['bMLV']).sum()
        totalPaymentSum = pd.Series(df['totalPayment']).sum()
        monthlydueSum = pd.Series(df['monthlydue']).sum()
        df['lastDueDate'] = pd.to_datetime(df['lastDueDate'])
        df['lastPayment'] = pd.to_datetime(df['lastPayment'])
        df['lastPayment'] = df['lastPayment'].map(lambda x: x.strftime('%m/%d/%Y') if pd.notnull(x) else '')
        df['lastDueDate'] = df['lastDueDate'].map(lambda x: x.strftime('%m/%d/%Y') if pd.notnull(x) else '')
        outStandingBalanceSum = pd.Series(df['outStandingBalance']).sum()
        df = df[['loanId', 'loanAccountNo', 'fullName', "mobileno", "term", "bMLV", "lastDueDate", "lastPayment",
                 "unpaidMonths", "totalPayment", "monthlydue", "outStandingBalance", "matured"]]

    df.to_excel(writer, startrow=7, merge_cells=False, index=False, sheet_name="Sheet_1", header=None)

    workbook = writer.book
    merge_format2 = workbook.add_format(docNameStyle)
    merge_format4 = workbook.add_format(footerStyle)
    merge_format6 = workbook.add_format(entriesStyle)
    merge_format7 = workbook.add_format(headerStyle)
    xldate_header = "As of {}".format(date)

    worksheet = writer.sheets["Sheet_1"]

    # list1 = [len(i) for i in headers]
    # # list1 = np.array(headerlen)
    #
    # if df.empty:
    #     list2 = list1
    # else:
    #     list2 = [max([len(str(s)) for s in df[col].values]) for col in df.columns]
    #
    # def function(list1, list2):
    #     list3 = [max(value) for value in zip(list1, list2)]
    #     return list3
    #
    # for col_num, value in enumerate(function(list1, list2)):
    #     worksheet.set_column(col_num, col_num, value + 1)

    range1 = 'J'
    range2 = 'K'
    range3 = 'M'
    reportTitle = 'Matured Loans Report'
    workSheet(workbook, worksheet, range1, range2, range3, xldate_header, name, reportTitle)

    worksheet.merge_range('A6:A7', 'App ID', merge_format7)
    worksheet.merge_range('B6:B7', "Loan Acct. #", merge_format7)
    worksheet.merge_range('C6:C7', "Client's Name", merge_format7)
    worksheet.merge_range('D6:D7', 'Mobile Number', merge_format7)
    worksheet.merge_range('E6:E7', 'Term', merge_format7)
    worksheet.merge_range('F6:F7', 'bMLV', merge_format7)
    worksheet.merge_range('G6:G7', 'Last Due Date', merge_format7)
    worksheet.merge_range('H6:H7', 'Last Payment', merge_format7)
    worksheet.merge_range('I6:I7', 'No. of Unpaid Months', merge_format7)
    worksheet.merge_range('J6:J7', 'Total Payment', merge_format7)
    worksheet.merge_range('K6:K7', 'Total Past Due', merge_format7)
    worksheet.merge_range('L6:L7', 'Outstanding Balance', merge_format7)
    worksheet.merge_range('M6:M7', 'No. of Months from Maturity', merge_format7)

    worksheet.merge_range('A{}:M{}'.format(count, count), nodisplay, merge_format6)
    worksheet.merge_range('A{}:B{}'.format(count + 1, count + 1), 'GRAND TOTAL:', merge_format2)

    worksheet.write('F{}'.format(count + 1), bMLVsum, merge_format4)
    worksheet.write('J{}'.format(count + 1), totalPaymentSum, merge_format4)
    worksheet.write('K{}'.format(count + 1), monthlydueSum, merge_format4)
    worksheet.write('L{}'.format(count + 1), outStandingBalanceSum, merge_format4)

    # #the writer has done its job
    writer.close()

    # #go back to the beginning of the stream
    output.seek(0)
    print('sending spreadsheet')
    filename = "Matured Loans Report as of {}.xlsx".format(date)
    return send_file(output, attachment_filename=filename, as_attachment=True)


@app.route("/duetoday", methods=['GET'])
def get_due():

    output = BytesIO()

    date = request.args.get('date')
    name = request.args.get('name')

    payload = {'date': date}
    url = "https://api360.zennerslab.com/Service1.svc/dueTodayReport"
    # url = "https://rfc360-test.zennerslab.com/Service1.svc/dueTodayReport"
    r = requests.post(url, json=payload)
    data_json = r.json()
    writer = pd.ExcelWriter(output, engine='xlsxwriter')
    headers = ["App ID", "Loan Account Number", "Customer Name", "Mobile Number", "Loan Type", "Due Today Term",
               "MI", "Total Past Due", "Unpaid Penalty", "Monthly Due", "Last Payment Date", "Last Payment Amount"]

    df = pd.DataFrame(data_json['dueTodayReportResult'])

    if df.empty:
        count = df.shape[0] + 8
        monthlyAmmortizationsum = 0
        monthduesum = 0
        unpaidPenaltysum = 0
        lastPaymentAmountsum = 0
        nodisplay = 'No Data'
        df = pd.DataFrame(pd.np.empty((0, 12)))
    else:
        count = df.shape[0] + 8
        nodisplay = ''
        df['loanAccountNo'] = df['loanAccountNo'].map(lambda x: x.lstrip("'"))
        df['monthlyAmmortization'] = df['monthlyAmmortization'].astype(float)
        df['monthdue'] = df['monthdue'].astype(float)
        df['loanId'] = df['loanId'].astype(int)
        df["fullName"] = df['firstName'] + ' ' + df['middleName'] + ' ' + df['lastName'] + ' ' + df['suffix']
        df.sort_values(by=['loanId'], inplace=True)
        monthlyAmmortizationsum = pd.Series(df['monthlyAmmortization']).sum()
        monthduesum = pd.Series(df['monthdue']).sum()
        unpaidPenaltysum = pd.Series(df['unpaidPenalty']).sum()
        lastPaymentAmountsum = pd.Series(df['lastPaymentAmount']).sum()
        df['lastPayment'] = pd.to_datetime(df['lastPayment'])
        df['monthlydue'] = pd.to_datetime(df['monthlydue'])
        df['monthlydue'] = df['monthlydue'].map(lambda x: x.strftime('%m/%d/%Y') if pd.notnull(x) else '')
        df['lastPayment'] = df['lastPayment'].map(lambda x: x.strftime('%m/%d/%Y') if pd.notnull(x) else '')
        df = df[
            ["loanId", "loanAccountNo", "fullName", "mobileno", "loanType", "term", "monthlyAmmortization",
             "monthdue", "unpaidPenalty", "monthlydue", "lastPayment", "lastPaymentAmount"]]

    df.to_excel(writer, startrow=7, merge_cells=False, index=False, sheet_name="Sheet_1", header=None
                )

    workbook = writer.book
    merge_format2 = workbook.add_format(docNameStyle)
    merge_format4 = workbook.add_format(footerStyle)
    merge_format6 = workbook.add_format(entriesStyle)
    merge_format7 = workbook.add_format(headerStyle)
    xldate_header = "For {}".format(date)

    worksheet = writer.sheets["Sheet_1"]

    # list1 = [len(i) for i in headers]
    # # list1 = np.array(headerlen)
    #
    # if df.empty:
    #     list2 = list1
    # else:
    #     list2 = [max([len(str(s)) for s in df[col].values]) for col in df.columns]
    #
    # def function(list1, list2):
    #     list3 = [max(value) for value in zip(list1, list2)]
    #     return list3
    #
    # for col_num, value in enumerate(function(list1, list2)):
    #     worksheet.set_column(col_num, col_num, value + 1)

    range1 = 'I'
    range2 = 'J'
    range3 = 'L'
    reportTitle = 'Due Today Report'
    workSheet(workbook, worksheet, range1, range2, range3, xldate_header, name, reportTitle)

    worksheet.merge_range('A6:A7', 'App ID', merge_format7)
    worksheet.merge_range('B6:B7', "Loan Acct. #", merge_format7)
    worksheet.merge_range('C6:C7', "Client's Name", merge_format7)
    worksheet.merge_range('D6:D7', 'Mobile Number', merge_format7)
    worksheet.merge_range('E6:E7', 'Loan Type', merge_format7)
    worksheet.merge_range('F6:F7', 'Due Today Term', merge_format7)
    worksheet.merge_range('G6:G7', 'MI', merge_format7)
    worksheet.merge_range('H6:H7', 'Total Past Due', merge_format7)
    worksheet.merge_range('I6:I7', 'Unpaid Penalty', merge_format7)
    worksheet.merge_range('J6:J7', 'Monthly Due', merge_format7)
    worksheet.merge_range('K6:K7', 'Last Payment Date', merge_format7)
    worksheet.merge_range('L6:L7', 'Last Payment Amount', merge_format7)

    worksheet.merge_range('A{}:L{}'.format(count, count), nodisplay, merge_format6)
    worksheet.merge_range('A{}:B{}'.format(count + 1, count + 1), 'GRAND TOTAL:', merge_format2)

    worksheet.write('G{}'.format(count + 1), monthlyAmmortizationsum, merge_format4)
    worksheet.write('H{}'.format(count + 1), monthduesum, merge_format4)
    worksheet.write('I{}'.format(count + 1), unpaidPenaltysum, merge_format4)
    worksheet.write('L{}'.format(count + 1), lastPaymentAmountsum, merge_format4)

    writer.close()

    output.seek(0)
    print('sending spreadsheet')
    filename = "Due Today Report {}.xlsx".format(date)
    return send_file(output, attachment_filename=filename, as_attachment=True)


if __name__ == "__main__":
    app.run(host='0.0.0.0', port=port)
